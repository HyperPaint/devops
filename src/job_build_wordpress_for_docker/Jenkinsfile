package job_build_wordpress_for_docker

@Library("devops")
import hyperpaint.util.Docker
import hyperpaint.util.DockerCompose
import hyperpaint.util.Regex
import hyperpaint.util.Shell
import hyperpaint.util.Util

Shell.setJenkins(this)

/**
 * Получение параметров, проверка и назначение значений по-умолчанию
 */
Boolean useCacheFile = params.use_cache_file
Boolean useCacheDocker = params.use_cache_docker
Boolean deployImage = params.deploy_image
Boolean testImage = params.test_image
Boolean exportImage = params.export_image
Boolean deleteImage = params.delete_image

if (useCacheFile == null) useCacheFile = true
if (useCacheDocker == null) useCacheDocker = true
if (deployImage == null) deployImage = true
if (testImage == null) testImage = true
if (exportImage == null) exportImage = false
if (deleteImage == null) deleteImage = false

/**
 * Получение переменных окружения, которые должны быть заданы
 */
String hostCredentials = env.host_credentials
String sshCredentials = env.ssh_credentials
String dockerComposeProjectDirectory = env.docker_compose_project_directory

String wordpressReleasesUrl = env.wordpress
String wordpressReleaseUrlRegex = env.wordpress_url_regex
String wordpressReleaseNameRegex = env.wordpress_name_regex
String wordpressReleaseFileNameRegex = env.wordpress_file_name_regex

String themeReleaseUrlRegex = env.theme_url_regex
String themeReleaseNameRegex = env.theme_name_regex
String themeReleaseFileNameRegex = env.theme_file_name_regex

String pluginReleaseUrlRegex = env.plugin_url_regex
String pluginReleaseNameRegex = env.plugin_name_regex
String pluginReleaseFileNameRegex = env.plugin_file_name_regex

String noEnvString = "Переменная окружения '%s' не установлена"
if (hostCredentials == null) throw new NullPointerException(String.format(noEnvString, "host_credentials"))
if (sshCredentials == null) throw new NullPointerException(String.format(noEnvString, "ssh_credentials"))
if (dockerComposeProjectDirectory == null) throw new NullPointerException(String.format(noEnvString, "docker_compose_project_directory"))

if (wordpressReleasesUrl == null) throw new NullPointerException(String.format(noEnvString, "wordpress"))
if (wordpressReleaseUrlRegex == null) throw new NullPointerException(String.format(noEnvString, "wordpress_url_regex"))
if (wordpressReleaseNameRegex == null) throw new NullPointerException(String.format(noEnvString, "wordpress_name_regex"))
if (wordpressReleaseFileNameRegex == null) throw new NullPointerException(String.format(noEnvString, "wordpress_file_name_regex"))

if (themeReleaseUrlRegex == null) throw new NullPointerException(String.format(noEnvString, "theme_url_regex"))
if (themeReleaseNameRegex == null) throw new NullPointerException(String.format(noEnvString, "theme_name_regex"))
if (themeReleaseFileNameRegex == null) throw new NullPointerException(String.format(noEnvString, "theme_file_name_regex"))

if (pluginReleaseUrlRegex == null) throw new NullPointerException(String.format(noEnvString, "plugin_url_regex"))
if (pluginReleaseNameRegex == null) throw new NullPointerException(String.format(noEnvString, "plugin_name_regex"))
if (pluginReleaseFileNameRegex == null) throw new NullPointerException(String.format(noEnvString, "plugin_file_name_regex"))

/**
 * Переменные сценария
 */
String imageName = "hyperpaint/wordpress"
String imageVersion = null
String imageFullName = null
// Используется для отката
String imageLatest = null

String releasesFile = "releases"
String wordpressReleasesFileName = "${releasesFile}-wordpress.html"
String themeReleasesFileName = "${releasesFile}-theme-%s.html"
String pluginReleasesFileName = "${releasesFile}-plugin-%s.html"

// Сутки в секундах
int cacheLifetime = 86400

// Ссылка на дистрибутив
String wordpressReleaseUrl = null
// Имя дистрибутива и директория дистрибутива
String wordpressReleaseName = null
// Файл дистрибутива
String wordpressReleaseFileName = null

pipeline {
    agent any
    parameters {
        booleanParam(name: "use_cache_file", defaultValue: true, description: "Использовать ранее загруженные файлы")
        booleanParam(name: "use_cache_docker", defaultValue: true, description: "Использовать прошлые сборки как кэш")
        booleanParam(name: "deploy_image", defaultValue: true, description: "Развернуть образ")
        booleanParam(name: "test_image", defaultValue: true, description: "Тестировать образ")
        booleanParam(name: "export_image", defaultValue: false, description: "Экспортировать образ")
        booleanParam(name: "delete_image", defaultValue: false, description: "Не сохранять образ")
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage("Получаю WordPress") {
            steps {
                script {
                    echo("Проверяю доступные версии WordPress...")
                    if (Regex.find(wordpressReleasesUrl, wordpressReleaseUrlRegex)) {
                        // Указана ссылка на дистрибутив
                        echo("Найдено 1 версий WordPress")
                        wordpressReleaseUrl = wordpressReleasesUrl
                        wordpressReleaseName = Regex.group(wordpressReleaseUrl, wordpressReleaseNameRegex)
                        wordpressReleaseFileName = Regex.group(wordpressReleaseUrl, wordpressReleaseFileNameRegex)
                    } else {
                        // Указана ссылка на список версий
                        echo("Найден список версий WordPress")
                        if (useCacheFile) {
                            Util.downloadFile(wordpressReleasesUrl, wordpressReleasesFileName, cacheLifetime)
                        } else {
                            Util.downloadFile(wordpressReleasesUrl, wordpressReleasesFileName, -1)
                        }

                        // Поиск версий в файле
                        String buff = readFile(wordpressReleasesFileName)
                        List<String> releaseUrls = Regex.groupAll(buff, wordpressReleaseUrlRegex)
                        if (releaseUrls.size()) {
                            echo("Найдено ${releaseUrls.size()} версий WordPress")
                            if (releaseUrls.size() == 1) {
                                wordpressReleaseUrl = releaseUrls.get(0)
                            } else {
                                wordpressReleaseUrl = input(message: "Выбор версии WordPress", parameters: [choice(name: "Версия WordPress", choices: releaseUrls.join('\n'))]).toString()
                            }
                        } else {
                            error("Найдено ${releaseUrls.size()} версий WordPress")
                        }
                    }

                    // Скачать
                    wordpressReleaseName = Regex.group(wordpressReleaseUrl, wordpressReleaseNameRegex)
                    wordpressReleaseFileName = Regex.group(wordpressReleaseUrl, wordpressReleaseFileNameRegex)
                    if (useCacheFile) {
                        Util.downloadFile(wordpressReleaseUrl, wordpressReleaseFileName)
                    } else {
                        Util.downloadFile(wordpressReleaseUrl, wordpressReleaseFileName, -1)
                    }

                    // Распаковать
                    Util.unarchiveFile(wordpressReleaseFileName, wordpressReleaseName, true)
                }
            }
        }
        stage('Получаю темы') {
            steps {
                script {
                    echo("Удаляю предустановленные темы WordPress...")
                    Shell.sh("cd \"${wordpressReleaseName}/wordpress/wp-content/themes/\" && rm -rf \$(ls | grep -v \"index.php\")")

                    echo("Проверяю доступные версии тем WordPress...")
                    String sizeString = env.themes
                    assert(sizeString instanceof String)
                    int size = Integer.valueOf(sizeString)
                    for (int i = 1; i <= size; i++) {
                        String currentReleasesUrl = env["theme" + i.toString()]
                        assert(currentReleasesUrl instanceof String)
                        String currentName = Regex.group(currentReleasesUrl, themeReleaseNameRegex)

                        echo("Проверяю доступные версии темы ${currentName}")
                        String currentReleaseUrl = null
                        if (Regex.find(currentReleasesUrl, themeReleaseUrlRegex.replace("%s", currentName))) {
                            // Указана ссылка на дистрибутив
                            echo("Найдено 1 версий ${currentName}")
                            currentReleaseUrl = currentReleasesUrl
                        } else {
                            // Указана ссылка на список версий
                            echo("Найден список версий ${currentName}")
                            String currentReleasesFileName = String.format(themeReleasesFileName, currentName)
                            if (useCacheFile) {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, cacheLifetime)
                            } else {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, -1)
                            }

                            // Поиск версий в файле
                            String buff = readFile(currentReleasesFileName)
                            List<String> releaseUrls = Regex.groupAll(buff, themeReleaseUrlRegex.replace("%s", currentName))
                            if (releaseUrls.size()) {
                                // Выбор версии
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                                if (releaseUrls.size() == 1) {
                                    currentReleaseUrl = releaseUrls.get(0)
                                } else {
                                    currentReleaseUrl = input(message: "Выбор версии ${currentName}".toString(), parameters: [choice(name: "Версия ${currentName}", choices: releaseUrls.join('\n'))]).toString()
                                }
                            } else {
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                            }
                        }

                        // Скачать
                        String chosenReleaseFileName = Regex.group(currentReleaseUrl, String.format(themeReleaseFileNameRegex, currentName))
                        if (useCacheFile) {
                            Util.downloadFile(currentReleaseUrl, chosenReleaseFileName)
                        } else {
                            Util.downloadFile(currentReleaseUrl, chosenReleaseFileName, -1)
                        }

                        // Распаковать
                        Util.unarchiveFile(chosenReleaseFileName, "${wordpressReleaseName}/wordpress/wp-content/themes/")
                    }
                }
            }
        }
        stage("Получаю плагины") {
            steps {
                script {
                    echo("Удаляю предустановленные плагины WordPress...")
                    Shell.sh("cd \"${wordpressReleaseName}/wordpress/wp-content/plugins/\" && rm -rf \$(ls | grep -v \"index.php\")")

                    echo("Проверяю доступные версии плагинов WordPress...")
                    String sizeString = env.plugins
                    assert(sizeString instanceof String)
                    int size = Integer.valueOf(sizeString)
                    for (int i = 1; i <= size; i++) {
                        String currentReleasesUrl = env["plugin" + i.toString()]
                        assert(currentReleasesUrl instanceof String)
                        String currentName = Regex.group(currentReleasesUrl, pluginReleaseNameRegex)

                        echo("Проверяю доступные версии плагина ${currentName}")
                        String currentReleaseUrl = null
                        // Указана ссылка на дистрибутив
                        if (Regex.find(currentReleasesUrl, pluginReleaseUrlRegex.replace("%s", currentName))) {
                            echo("Найдено 1 версий ${currentName}")
                            currentReleaseUrl = currentReleasesUrl
                        } else {
                            // Указана ссылка на список версий
                            echo("Найден список версий ${currentName}")
                            String currentReleasesFileName = String.format(pluginReleasesFileName, currentName)
                            if (useCacheFile) {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, cacheLifetime)
                            } else {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, -1)
                            }

                            // Поиск версий в файле
                            String buff = readFile(currentReleasesFileName)
                            List<String> releaseUrls = Regex.groupAll(buff, pluginReleaseUrlRegex.replace("%s", currentName))
                            if (releaseUrls.size()) {
                                // Выбор версии
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                                if (releaseUrls.size() == 1) {
                                    currentReleaseUrl = releaseUrls.get(0)
                                } else {
                                    currentReleaseUrl = input(message: "Выбор версии ${currentName}".toString(), parameters: [choice(name: "Версия ${currentName}", choices: releaseUrls.join('\n'))]).toString()
                                }
                            } else {
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                            }
                        }

                        // Скачать
                        String chosenReleaseFileName = Regex.group(currentReleaseUrl, String.format(pluginReleaseFileNameRegex, currentName))
                        if (useCacheFile) {
                            Util.downloadFile(currentReleaseUrl, chosenReleaseFileName)
                        } else {
                            Util.downloadFile(currentReleaseUrl, chosenReleaseFileName, -1)
                        }

                        // Распаковать
                        Util.unarchiveFile(chosenReleaseFileName, "${wordpressReleaseName}/wordpress/wp-content/plugins/")
                    }
                }
            }
        }
        stage('Настраиваю WordPress') {
            steps {
                script {
                    echo("Настраиваю WordPress...")
                    String file = "${wordpressReleaseName}/wordpress/wp-config-sample.php"
                    // Добавить дополнительную конфигурацию в начало файла с заменой <?php
                    Shell.sh("sed -i 's/<?php//g' '${file}'")
                    Shell.sh("mv '${file}' '${file}.buff'")
                    Shell.sh("cat 'src/job_build_wordpress_for_docker/wordpress/wp-config.php' '${file}.buff' | tee '${file}' 1>/dev/null")
                    Shell.sh("rm -f '${file}.buff'")
                    // Параметризовать файл - параметры базы данных
                    Shell.sh("sed -i \"s/define(\\s*'DB_NAME',\\s*'.*'\\s*);/define( 'DB_NAME', '\\\$DB_NAME' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'DB_USER',\\s*'.*'\\s*);/define( 'DB_USER', '\\\$DB_USER' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'DB_PASSWORD',\\s*'.*'\\s*);/define( 'DB_PASSWORD', '\\\$DB_PASSWORD' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'DB_HOST',\\s*'.*'\\s*);/define( 'DB_HOST', '\\\$DB_HOST' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'DB_CHARSET',\\s*'.*'\\s*);/define( 'DB_CHARSET', '\\\$DB_CHARSET' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'DB_COLLATE',\\s*'.*'\\s*);/define( 'DB_COLLATE', '\\\$DB_COLLATE' );/g\" \"${file}\"")
                    // Параметризовать файл - уникальные ключи и соли для аутентификации
                    Shell.sh("sed -i \"s/define(\\s*'AUTH_KEY',\\s*'.*'\\s*);/define( 'AUTH_KEY', '\\\$AUTH_KEY' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'SECURE_AUTH_KEY',\\s*'.*'\\s*);/define( 'SECURE_AUTH_KEY', '\\\$SECURE_AUTH_KEY' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'LOGGED_IN_KEY',\\s*'.*'\\s*);/define( 'LOGGED_IN_KEY', '\\\$LOGGED_IN_KEY' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'NONCE_KEY',\\s*'.*'\\s*);/define( 'NONCE_KEY', '\\\$NONCE_KEY' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'AUTH_SALT',\\s*'.*'\\s*);/define( 'AUTH_SALT', '\\\$AUTH_SALT' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'SECURE_AUTH_SALT',\\s*'.*'\\s*);/define( 'SECURE_AUTH_SALT', '\\\$SECURE_AUTH_SALT' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'LOGGED_IN_SALT',\\s*'.*'\\s*);/define( 'LOGGED_IN_SALT', '\\\$LOGGED_IN_SALT' );/g\" \"${file}\"")
                    Shell.sh("sed -i \"s/define(\\s*'NONCE_SALT',\\s*'.*'\\s*);/define( 'NONCE_SALT', '\\\$NONCE_SALT' );/g\" \"${file}\"")
                    // Показать конфиг
                    echo(readFile(file))
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    echo("Копирую зависимые файлы контейнера...")
                    Shell.sh("cp -r 'src/job_build_wordpress_for_docker/Dockerfile' '${wordpressReleaseName}/'")
                    Shell.sh("cp -r 'src/job_build_wordpress_for_docker/httpd' '${wordpressReleaseName}/'")
                    Shell.sh("cp -r 'src/job_build_wordpress_for_docker/scripts' '${wordpressReleaseName}/'")

                    echo("Собираю контейнер...")
                    String BuildNumber = env.BUILD_NUMBER
                    assert(BuildNumber instanceof String)
                    imageVersion = Regex.group(wordpressReleaseName, "([0-9\\.]+)") + "-" + BuildNumber
                    imageFullName = imageName + ":" + imageVersion
                    withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                        Docker.dockerConnect(env.host, env.user, env.id_rsa, {
                            // Сохранить последнюю версию
                            imageLatest = Docker.images("${imageName}:latest", true).trim()

                            if (useCacheDocker) {
                                Docker.build(wordpressReleaseName, imageFullName, true)
                            } else {
                                Docker.build(wordpressReleaseName, imageFullName, false)
                            }

                            // latest
                            Docker.tag(imageFullName, "${imageName}:latest")
                        })
                    }

                    // Директория больше не нужна
                    Shell.sh("rm -rf '${wordpressReleaseName}/'")
                }
            }
        }
        stage("Docker Deploy") {
            steps {
                script {
                    if (deployImage) {
                        echo("Развёртываю контейнер...")
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Shell.sshConnect(env.host, env.user, env.id_rsa, {
                                // Форматированный конфиг для скачивания
                                String dockerComposeYml = DockerCompose.config(dockerComposeProjectDirectory)
                                writeFile(file: "docker-compose.yml", text: dockerComposeYml)

                                // Деплой
                                DockerCompose.down(dockerComposeProjectDirectory)
                                DockerCompose.up(dockerComposeProjectDirectory)
                                Thread.sleep(10000)
                                Shell.echo(DockerCompose.logs(dockerComposeProjectDirectory))

                                String result = DockerCompose.listContainers(dockerComposeProjectDirectory, true)
                                List<String> containerIds = new ArrayList<>()
                                containerIds.addAll(result.split("\n"))
                                containerIds.remove("")
                                echo("Развёрнуто ${containerIds.size()} контейнеров")
                            })
                        }
                    } else {
                        echo("Пропускаю развёртывание...")
                    }
                }
            }
        }
        stage("Docker Test && Down") {
            steps {
                script {
                    try {
                        if (deployImage && testImage) {
                            echo("Начинаю тестирование...")
                            withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                                Shell.sshConnect(env.host, env.user, env.id_rsa, {
                                    echo("Тест: Перезагрузка")
                                    DockerCompose.restart(dockerComposeProjectDirectory)
                                    Thread.sleep(10000)
                                    String restartResult = DockerCompose.listContainers(dockerComposeProjectDirectory, true)
                                    // curl с проверкой на код 200
                                })
                            }
                        } else {
                            echo("Пропускаю тестирование...")
                        }
                    } catch (Exception e) {
                        e.printStackTrace()
                    } finally {
                        echo("Останавливаю контейнер...")
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Shell.sshConnect(env.host, env.user, env.id_rsa, {
                                DockerCompose.down(dockerComposeProjectDirectory)
                            })
                        }
                    }
                }
            }
        }
        stage("Docker Save && Delete") {
            steps {
                script {
                    if (exportImage) {
                        echo("Экспортирую образ...")
                        assert(imageName instanceof String)
                        assert(imageFullName instanceof String)
                        String imageExportedName = imageName.replace("/", "-").replace(":", "-")
                        String imageExportedFullName = imageFullName.replace("/", "-").replace(":", "-")
                        // Удаление прошлой сборки. Расширяется только без кавычек
                        if (Shell.shGetStatus("[[ -f ${imageExportedName}:*.tar ]]")) {
                            Shell.sh("rm -f ${imageExportedName}:*.tar")
                        }
                        // Экспорт
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Docker.dockerConnect(env.host, env.user, env.id_rsa, {
                                Docker.save(imageFullName, "${imageExportedFullName}.tar")
                            })
                        }
                    }

                    if (deleteImage) {
                        echo("Удаляю образ...")
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Docker.dockerConnect(env.host, env.user, env.id_rsa, {
                                // Установить последнюю версию
                                assert(imageLatest instanceof String)
                                if (imageLatest == "") {
                                    // Это первая сборка
                                    Docker.removeImage("${imageName}:latest")
                                } else {
                                    // Есть предпоследняя сборка
                                    Docker.tag(imageLatest, "${imageName}:latest")
                                }

                                // rmi
                                assert(imageFullName instanceof String)
                                Docker.removeImage(imageFullName)
                            })
                        }
                    }
                }
            }
        }
    }
}