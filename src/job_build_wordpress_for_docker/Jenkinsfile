package job_build_wordpress_for_docker

@Library("devops")
import hyperpaint.util.Docker
import hyperpaint.util.DockerCompose
import hyperpaint.util.Regex
import hyperpaint.util.Shell
import hyperpaint.util.Util

Shell.setJenkins(this)

/**
 * Получение параметров, проверка и назначение значений по-умолчанию
 */
Boolean useCache = params.use_cache
Boolean deployImage = params.deploy_image
Boolean testImage = params.test_image
Boolean exportImage = params.export_image
Boolean deleteImage = params.delete_image

if (useCache == null) useCache = true
if (deployImage == null) deployImage = true
if (testImage == null) testImage = true
if (exportImage == null) exportImage = false
if (deleteImage == null) deleteImage = false

/**
 * Получение переменных окружения, которые должны быть заданы
 */
String hostCredentials = env.host_credentials
String sshCredentials = env.ssh_credentials
String dockerComposeProjectDirectory = env.docker_compose_project_directory

String wordpressReleaseUrlPattern = env.wordpress_url_pattern
String wordpressReleaseNamePattern = env.wordpress_name_pattern
String wordpressReleaseFileNamePattern = env.wordpress_file_name_pattern

String themeReleaseUrlPattern = env.theme_url_pattern
String themeReleaseNamePattern = env.theme_name_pattern
String themeReleaseFileNamePattern = env.theme_file_name_pattern

String pluginReleaseUrlPattern = env.plugin_url_pattern
String pluginReleaseNamePattern = env.plugin_name_pattern
String pluginReleaseFileNamePattern = env.plugin_file_name_pattern

String noEnvString = "Переменная окружения '%s' не установлена"
if (hostCredentials == null) throw new NullPointerException(String.format(noEnvString, "host_credentials"))
if (sshCredentials == null) throw new NullPointerException(String.format(noEnvString, "ssh_credentials"))
if (dockerComposeProjectDirectory == null) throw new NullPointerException(String.format(noEnvString, "docker_compose_project_directory"))

if (wordpressReleaseUrlPattern == null) throw new NullPointerException(String.format(noEnvString, "wordpress_url_pattern"))
if (wordpressReleaseNamePattern == null) throw new NullPointerException(String.format(noEnvString, "wordpress_name_pattern"))
if (wordpressReleaseFileNamePattern == null) throw new NullPointerException(String.format(noEnvString, "wordpress_file_name_pattern"))

if (themeReleaseUrlPattern == null) throw new NullPointerException(String.format(noEnvString, "theme_url_pattern"))
if (themeReleaseNamePattern == null) throw new NullPointerException(String.format(noEnvString, "theme_name_pattern"))
if (themeReleaseFileNamePattern == null) throw new NullPointerException(String.format(noEnvString, "theme_file_name_pattern"))

if (pluginReleaseUrlPattern == null) throw new NullPointerException(String.format(noEnvString, "plugin_url_pattern"))
if (pluginReleaseNamePattern == null) throw new NullPointerException(String.format(noEnvString, "plugin_name_pattern"))
if (pluginReleaseFileNamePattern == null) throw new NullPointerException(String.format(noEnvString, "plugin_file_name_pattern"))

/**
 * Переменные сценария
 */
String imageName = "blog"
String imageVersion = null
String imageFullName = null
String imageLatest = null

String releasesFile = "releases"
String wordpressReleasesFileName = "${releasesFile}-wordpress.html"
String themeReleasesFileName = "${releasesFile}-theme-%s.html"
String pluginReleasesFileName = "${releasesFile}-plugin-%s.html"

// Сутки в секундах
int cacheLifetime = 86400

// Ссылка на дистрибутив
String wordpressChosenReleaseUrl = null
// Имя дистрибутива и директория дистрибутива
String wordpressChosenReleaseName = null
// Файл дистрибутива
String wordpressChosenReleaseFileName = null

//noinspection GroovyAssignabilityCheck
pipeline {
    agent any
    parameters {
        booleanParam(name: "use_cache", defaultValue: true, description: "Использовать кэш")
        booleanParam(name: "deploy_image", defaultValue: true, description: "Развёртывать образ")
        booleanParam(name: "test_image", defaultValue: true, description: "Тестировать образ")
        booleanParam(name: "export_image", defaultValue: false, description: "Экспортировать образ")
        booleanParam(name: "delete_image", defaultValue: false, description: "Удалить образ после сборки")
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage("Получаю WordPress") {
            steps {
                script {
                    echo("Проверяю доступные версии WordPress...")
                    String wordpressReleasesUrl = env.wordpress
                    assert(wordpressReleasesUrl instanceof String)

                    // Ссылка на дистрибутив или список версий?
                    if (Regex.find(wordpressReleasesUrl, wordpressReleaseUrlPattern)) {
                        echo("Найдено 1 версий WordPress")
                        wordpressChosenReleaseUrl = wordpressReleasesUrl
                        wordpressChosenReleaseName = Regex.group(wordpressChosenReleaseUrl, wordpressReleaseNamePattern)
                        wordpressChosenReleaseFileName = Regex.group(wordpressChosenReleaseUrl, wordpressReleaseFileNamePattern)
                    } else {
                        echo("Найден список версий WordPress")
                        // Получить файл релизов
                        if (useCache) {
                            Util.downloadFile(wordpressReleasesUrl, wordpressReleasesFileName, cacheLifetime)
                        } else {
                            Util.downloadFile(wordpressReleasesUrl, wordpressReleasesFileName, -1)
                        }

                        // Поиск версий в файле
                        String buff = readFile(wordpressReleasesFileName)
                        List<String> releaseUrls = Regex.groupAll(buff, wordpressReleaseUrlPattern)
                        if (releaseUrls.size()) {
                            echo("Найдено ${releaseUrls.size()} версий WordPress")
                            if (releaseUrls.size() == 1) {
                                wordpressChosenReleaseUrl = releaseUrls.get(0)
                            } else {
                                wordpressChosenReleaseUrl = input(message: "Выбор версии WordPress", parameters: [choice(name: "Версия WordPress", choices: releaseUrls.join('\n'))]).toString()
                            }
                        } else {
                            error("Найдено ${releaseUrls.size()} версий WordPress")
                        }
                    }

                    // Скачать
                    wordpressChosenReleaseName = Regex.group(wordpressChosenReleaseUrl, wordpressReleaseNamePattern)
                    wordpressChosenReleaseFileName = Regex.group(wordpressChosenReleaseUrl, wordpressReleaseFileNamePattern)
                    if (useCache) {
                        Util.downloadFile(wordpressChosenReleaseUrl, wordpressChosenReleaseFileName)
                    } else {
                        Util.downloadFile(wordpressChosenReleaseUrl, wordpressChosenReleaseFileName, -1)
                    }

                    // Распаковать
                    Util.unarchiveFile(wordpressChosenReleaseFileName, wordpressChosenReleaseName, true)
                }
            }
        }
        stage('Получаю темы') {
            steps {
                script {
                    echo("Удаляю предустановленные темы WordPress...")
                    Shell.shOrFail("cd \"${wordpressChosenReleaseName}/wordpress/wp-content/themes/\" && rm -rf \$(ls | grep -v \"index.php\")")

                    echo("Проверяю доступные версии тем WordPress...")
                    String sizeString = env.themes
                    assert(sizeString instanceof String)
                    int size = Integer.valueOf(sizeString)
                    for (int i = 1; i <= size; i++) {
                        String currentReleasesUrl = env["theme" + i.toString()]
                        assert(currentReleasesUrl instanceof String)
                        String currentName = Regex.group(currentReleasesUrl, themeReleaseNamePattern)

                        echo("Проверяю доступные версии ${currentName}")
                        // Ссылка на дистрибутив или список версий?
                        String chosenReleaseUrl = null
                        if (Regex.find(currentReleasesUrl, themeReleaseUrlPattern.replace("%s", currentName))) {
                            echo("Найдено 1 версий ${currentName}")
                            chosenReleaseUrl = currentReleasesUrl
                        } else {
                            // Получить файл релизов
                            echo("Найден список версий ${currentName}")
                            String currentReleasesFileName = String.format(themeReleasesFileName, currentName)
                            if (useCache) {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, cacheLifetime)
                            } else {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, -1)
                            }

                            // Поиск версий в файле
                            String buff = readFile(currentReleasesFileName)
                            List<String> releaseUrls = Regex.groupAll(buff, themeReleaseUrlPattern.replace("%s", currentName))
                            if (releaseUrls.size()) {
                                // Выбор версии
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                                if (releaseUrls.size() == 1) {
                                    chosenReleaseUrl = releaseUrls.get(0)
                                } else {
                                    chosenReleaseUrl = input(message: "Выбор версии ${currentName}".toString(), parameters: [choice(name: "Версия ${currentName}", choices: releaseUrls.join('\n'))]).toString()
                                }
                            } else {
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                            }
                        }

                        // Скачать
                        String chosenReleaseFileName = Regex.group(chosenReleaseUrl, String.format(themeReleaseFileNamePattern, currentName))
                        if (useCache) {
                            Util.downloadFile(chosenReleaseUrl, chosenReleaseFileName)
                        } else {
                            Util.downloadFile(chosenReleaseUrl, chosenReleaseFileName, -1)
                        }

                        // Распаковать
                        Util.unarchiveFile(chosenReleaseFileName, "${wordpressChosenReleaseName}/wordpress/wp-content/themes/")
                    }
                }
            }
        }
        stage("Получаю плагины") {
            steps {
                script {
                    echo("Удаляю предустановленные плагины WordPress...")
                    Shell.shOrFail("cd \"${wordpressChosenReleaseName}/wordpress/wp-content/plugins/\" && rm -rf \$(ls | grep -v \"index.php\")")

                    echo("Проверяю доступные версии плагинов WordPress...")
                    String sizeString = env.plugins
                    assert(sizeString instanceof String)
                    int size = Integer.valueOf(sizeString)
                    for (int i = 1; i <= size; i++) {
                        String currentReleasesUrl = env["plugin" + i.toString()]
                        assert(currentReleasesUrl instanceof String)
                        String currentName = Regex.group(currentReleasesUrl, pluginReleaseNamePattern)

                        echo("Проверяю доступные версии ${currentName}")
                        // Ссылка на дистрибутив или список версий?
                        String chosenReleaseUrl = null
                        if (Regex.find(currentReleasesUrl, pluginReleaseUrlPattern.replace("%s", currentName))) {
                            echo("Найдено 1 версий ${currentName}")
                            chosenReleaseUrl = currentReleasesUrl
                        } else {
                            // Получить файл релизов
                            echo("Найден список версий ${currentName}")
                            String currentReleasesFileName = String.format(pluginReleasesFileName, currentName)
                            if (useCache) {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, cacheLifetime)
                            } else {
                                Util.downloadFile(currentReleasesUrl, currentReleasesFileName, -1)
                            }

                            // Поиск версий в файле
                            String buff = readFile(currentReleasesFileName)
                            List<String> releaseUrls = Regex.groupAll(buff, pluginReleaseUrlPattern.replace("%s", currentName))
                            if (releaseUrls.size()) {
                                // Выбор версии
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                                if (releaseUrls.size() == 1) {
                                    chosenReleaseUrl = releaseUrls.get(0)
                                } else {
                                    chosenReleaseUrl = input(message: "Выбор версии ${currentName}".toString(), parameters: [choice(name: "Версия ${currentName}", choices: releaseUrls.join('\n'))]).toString()
                                }
                            } else {
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                            }
                        }

                        // Скачать
                        String chosenReleaseFileName = Regex.group(chosenReleaseUrl, String.format(pluginReleaseFileNamePattern, currentName))
                        if (useCache) {
                            Util.downloadFile(chosenReleaseUrl, chosenReleaseFileName)
                        } else {
                            Util.downloadFile(chosenReleaseUrl, chosenReleaseFileName, -1)
                        }

                        // Распаковать
                        Util.unarchiveFile(chosenReleaseFileName, "${wordpressChosenReleaseName}/wordpress/wp-content/plugins/")
                    }
                }
            }
        }
        stage('Настраиваю WordPress') {
            steps {
                script {
                    echo("Настраиваю WordPress...")
                    String file = "${wordpressChosenReleaseName}/wordpress/wp-config-sample.php"
                    // Добавить дополнительную конфигурацию в начало файла с заменой <?php
                    Shell.shOrFail("sed -i 's/<?php//g' '${file}'")
                    Shell.shOrFail("mv '${file}' '${file}.buff'")
                    Shell.shOrFail("cat 'src/job_build_wordpress_for_docker/wordpress/wp-config.php' '${file}.buff' | tee '${file}' 1>/dev/null")
                    Shell.shOrFail("rm -f '${file}.buff'")
                    // Параметризовать файл - параметры базы данных
                    Shell.shOrFail("sed -i \"s/define( 'DB_NAME', 'database_name_here' );/define( 'DB_NAME', '\\\$DB_NAME' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'DB_USER', 'username_here' );/define( 'DB_USER', '\\\$DB_USER' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'DB_PASSWORD', 'password_here' );/define( 'DB_PASSWORD', '\\\$DB_PASSWORD' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'DB_HOST', 'localhost' );/define( 'DB_HOST', '\\\$DB_HOST' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'DB_CHARSET', 'utf8' );/define( 'DB_CHARSET', '\\\$DB_CHARSET' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'DB_COLLATE', '' );/define( 'DB_COLLATE', '\\\$DB_COLLATE' );/g\" \"${file}\"")
                    // Параметризовать файл - уникальные ключи и соли для аутентификации
                    Shell.shOrFail("sed -i \"s/define( 'AUTH_KEY',\\s*'put your unique phrase here' );/define( 'AUTH_KEY', '\\\$AUTH_KEY' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'SECURE_AUTH_KEY',\\s*'put your unique phrase here' );/define( 'SECURE_AUTH_KEY', '\\\$SECURE_AUTH_KEY' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'LOGGED_IN_KEY',\\s*'put your unique phrase here' );/define( 'LOGGED_IN_KEY', '\\\$LOGGED_IN_KEY' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'NONCE_KEY',\\s*'put your unique phrase here' );/define( 'NONCE_KEY', '\\\$NONCE_KEY' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'AUTH_SALT',\\s*'put your unique phrase here' );/define( 'AUTH_SALT', '\\\$AUTH_SALT' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'SECURE_AUTH_SALT',\\s*'put your unique phrase here' );/define( 'SECURE_AUTH_SALT', '\\\$SECURE_AUTH_SALT' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'LOGGED_IN_SALT',\\s*'put your unique phrase here' );/define( 'LOGGED_IN_SALT', '\\\$LOGGED_IN_SALT' );/g\" \"${file}\"")
                    Shell.shOrFail("sed -i \"s/define( 'NONCE_SALT',\\s*'put your unique phrase here' );/define( 'NONCE_SALT', '\\\$NONCE_SALT' );/g\" \"${file}\"")
                    // Показать конфиг
                    echo(readFile(file))
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    echo("Копирую зависимые файлы контейнера...")
                    Shell.shOrFail("cp -r 'src/job_build_wordpress_for_docker/Dockerfile' '${wordpressChosenReleaseName}/'")
                    Shell.shOrFail("cp -r 'src/job_build_wordpress_for_docker/httpd' '${wordpressChosenReleaseName}/'")
                    Shell.shOrFail("cp -r 'src/job_build_wordpress_for_docker/scripts' '${wordpressChosenReleaseName}/'")

                    echo("Собираю контейнер...")
                    String BuildNumber = env.BUILD_NUMBER
                    assert(BuildNumber instanceof String)
                    imageVersion = Regex.group(wordpressChosenReleaseName, "([0-9\\.]+)") + "-" + BuildNumber
                    imageFullName = imageName + ":" + imageVersion
                    withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                        Docker.dockerConnect(env.host, env.user, env.id_rsa, {
                            // latest
                            imageLatest = Docker.imagesLatest(imageName, true).trim()

                            if (useCache) {
                                Docker.build(imageFullName, wordpressChosenReleaseName, true)
                            } else {
                                Docker.build(imageFullName, wordpressChosenReleaseName, false)
                            }

                            // latest
                            Docker.tag(imageFullName, "${imageName}:latest")
                        })
                    }

                    // Директория больше не нужна
                    Shell.shOrFail("rm -rf '${wordpressChosenReleaseName}/'")
                }
            }
        }
        stage("Docker Deploy") {
            steps {
                script {
                    if (deployImage) {
                        echo("Развёртываю контейнер...")
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Shell.sshConnect(env.host, env.user, env.id_rsa, {
                                // Форматированный конфиг для скачивания
                                String dockerComposeYml = DockerCompose.config(dockerComposeProjectDirectory)
                                writeFile(file: "docker-compose.yml", text: dockerComposeYml)

                                // Деплой
                                DockerCompose.down(dockerComposeProjectDirectory)
                                DockerCompose.up(dockerComposeProjectDirectory)
                                Thread.sleep(10000)
                                Shell.echo(DockerCompose.logs(dockerComposeProjectDirectory))

                                String result = DockerCompose.ps(dockerComposeProjectDirectory, true)
                                List<String> containerIds = new ArrayList<>()
                                containerIds.addAll(result.split("\n"))
                                containerIds.remove("")
                                echo("Развёрнуто ${containerIds.size()} контейнеров")
                            })
                        }
                    } else {
                        echo("Пропускаю развёртывание...")
                    }
                }
            }
        }
        stage("Docker Test && Down") {
            steps {
                script {
                    try {
                        if (deployImage && testImage) {
                            echo("Начинаю тестирование...")
                            withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                                Shell.sshConnect(env.host, env.user, env.id_rsa, {
                                    echo("Тест: Перезагрузка")
                                    DockerCompose.restart(dockerComposeProjectDirectory)
                                    Thread.sleep(10000)
                                    String result = DockerCompose.ps(dockerComposeProjectDirectory, true)
                                    List<String> containerIds = new ArrayList<>()
                                    containerIds.addAll(result.split("\n"))
                                    containerIds.remove("")
                                    echo("Развёрнуто ${containerIds.size()} контейнеров")
                                })
                            }
                        } else {
                            echo("Пропускаю тестирование...")
                        }
                    } catch (Exception e) {
                        e.printStackTrace()
                    } finally {
                        echo("Останавливаю контейнер...")
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Shell.sshConnect(env.host, env.user, env.id_rsa, {
                                DockerCompose.down(dockerComposeProjectDirectory)
                            })
                        }
                    }
                }
            }
        }
        stage("Docker Save && Delete") {
            steps {
                script {
                    if (exportImage) {
                        echo("Экспортирую образ...")
                        // Удаление прошлой сборки. Расширяется только без кавычек
                        assert(imageName instanceof String)
                        if (Shell.shWithStatus("[[ -f ${imageName}:*.tar ]]")) {
                            Shell.shOrFail("rm -f ${imageName}:*.tar")
                        }
                        // Экспорт
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Docker.dockerConnect(env.host, env.user, env.id_rsa, {
                                assert(imageFullName instanceof String)
                                Docker.save(imageFullName, "${imageFullName}.tar")
                            })
                        }
                    }

                    if (deleteImage) {
                        echo("Удаляю образ...")
                        withCredentials([string(credentialsId: hostCredentials, variable: "host"), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: "id_rsa", usernameVariable: "user")]) {
                            Docker.dockerConnect(env.host, env.user, env.id_rsa, {
                                // latest
                                assert(imageLatest instanceof String)
                                Docker.tag(imageLatest, "${imageName}:latest")

                                // rmi
                                assert(imageFullName instanceof String)
                                Docker.rmi(imageFullName)
                            })
                        }
                    }
                }
            }
        }
    }
}