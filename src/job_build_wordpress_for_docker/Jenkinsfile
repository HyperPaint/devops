package job_build_wordpress_for_docker

@Library("devops@build_wordpress_for_docker")
import hyperpaint.util.Docker
import hyperpaint.util.DockerCompose
import hyperpaint.util.Shell

import java.util.regex.Matcher

Shell.setJenkins(this)

boolean doNotUseCache = params.do_not_use_cache
boolean doNotTestImage = params.do_not_test_image
boolean doNotSaveImage = params.do_not_save_image

String hostCredentials = env.host_credentials
String sshCredentials = env.ssh_credentials
String dockerComposeProjectDirectory = env.docker_compose_project_directory

String wordpressReleaseUrlPattern = env.wordpress_url_pattern
String wordpressReleaseNamePattern = env.wordpress_name_pattern
String wordpressReleaseFileNamePattern = env.wordpress_file_name_pattern

String themeReleaseUrlPattern = env.theme_url_pattern
String themeReleaseNamePattern = env.theme_name_pattern
String themeReleaseFileNamePattern = env.theme_file_name_pattern

String pluginReleaseUrlPattern = env.plugin_url_pattern
String pluginReleaseNamePattern = env.plugin_name_pattern
String pluginReleaseFileNamePattern = env.plugin_file_name_pattern

String imageName = "blog"
String imageVersion = null
String imageFullName = null

// Сутки
int cacheLifetime = 86400

String releasesFile = "releases"
String wordpressReleasesFileName = "${releasesFile}-wordpress.html"
String themeReleasesFileName = "${releasesFile}-theme-%s.html"
String pluginReleasesFileName = "${releasesFile}-plugin-%s.html"

// Ссылка на дистрибутив
String wordpressChosenReleaseUrl = null
// Имя дистрибутива и директория дистрибутива
String wordpressChosenReleaseName = null
// Файл дистрибутива
String wordpressChosenReleaseFileName = null

static boolean regexFind(String text, String regex) {
    Matcher matcher = (text =~ regex)
    return matcher.find()
}

static String regexGroup(String text, String regex) {
    Matcher matcher = (text =~ regex)
    matcher.find()
    try {
        return matcher.group(1)
    }
    catch (IllegalStateException ignored) {
        error("Не удалось найти совпадение по регулярному выражению ${regex}\n${text}")
    }
    catch (IndexOutOfBoundsException ignored) {
        error("Не удалось найти группу по регулярному выражению ${regex}\n${text}")
    }
}

static void downloadFile(String url, String file, Integer cacheLifetime = Integer.MAX_VALUE) {
    assert url instanceof String
    assert file instanceof String
    assert cacheLifetime instanceof Integer

    // Поиск существующего файла
    Integer fileModifiedXSecondsAgo = Integer.MAX_VALUE
    if (Shell.executeWithStatus("[[ -f '${file}' ]]")) {
        fileModifiedXSecondsAgo = Shell.executeWithOutput("echo \"\$(date +%s)-\$(date -r '${file}' +%s)\" | bc").toInteger()
    }

    // Проверка актуальности файла, больше суток
    if (fileModifiedXSecondsAgo >= cacheLifetime) {
        Shell.executeWithStatus("wget -O '${file}' '${url}'")
    }
}

static List<String> searchText(String file, String regex) {
    assert file instanceof String
    assert regex instanceof String
    String releaseLinksBuff = Shell.executeWithOutput("grep -ioE '${regex}' '${file}' | uniq | sort -r")
    List<String> releaseUrls = new ArrayList<>()
    releaseUrls.addAll(releaseLinksBuff.split('\n'))
    releaseUrls.remove('')
    return releaseUrls
}

//noinspection GroovyAssignabilityCheck
pipeline {
    agent any
    parameters {
        booleanParam(name: 'do_not_use_cache', defaultValue: false, description: 'Не использовать кэш')
        booleanParam(name: 'do_not_test_image', defaultValue: false, description: 'Не тестировать образ')
        booleanParam(name: 'do_not_save_image', defaultValue: false, description: 'Не сохранять образ')
    }
    stages {
        stage('Get WordPress') {
            steps {
                script {
                    if (doNotUseCache) {
                        echo('Удаляю кэш...')
                        cleanWs(deleteDirs: true, patterns: [[pattern: 'src', type: 'EXCLUDE']])
                    }
                }

                echo('Проверяю доступные версии WordPress...')
                script {
                    String wordpressReleasesUrl = env.wordpress
                    // Ссылка на дистрибутив или список версий?
                    if (regexFind(wordpressReleasesUrl, wordpressReleaseUrlPattern)) {
                        echo("Найдено 1 версий WordPress")
                        wordpressChosenReleaseUrl = wordpressReleasesUrl
                        wordpressChosenReleaseName = regexGroup(wordpressChosenReleaseUrl, wordpressReleaseNamePattern)
                        wordpressChosenReleaseFileName = regexGroup(wordpressChosenReleaseUrl, wordpressReleaseFileNamePattern)
                    } else {
                        echo("Найден список версий WordPress")
                        // Получить файл релизов
                        downloadFile(wordpressReleasesUrl, wordpressReleasesFileName, cacheLifetime)

                        // Поиск версий в файле
                        List<String> releaseUrls = searchText(wordpressReleasesFileName, wordpressReleaseUrlPattern)
                        if (releaseUrls.size()) {
                            echo("Найдено ${releaseUrls.size()} версий WordPress")
                            if (releaseUrls.size() == 1) {
                                wordpressChosenReleaseUrl = releaseUrls.get(0)
                            } else {
                                wordpressChosenReleaseUrl = input(message: "Выбор версии WordPress", parameters: [choice(name: "Версия WordPress", choices: releaseUrls.join('\n'))]).toString()
                            }
                        } else {
                            error("Найдено ${releaseUrls.size()} версий WordPress")
                        }
                    }

                    echo('Скачиваю WordPress...')
                    wordpressChosenReleaseName = regexGroup(wordpressChosenReleaseUrl, wordpressReleaseNamePattern)
                    wordpressChosenReleaseFileName = regexGroup(wordpressChosenReleaseUrl, wordpressReleaseFileNamePattern)
                    downloadFile(wordpressChosenReleaseUrl, wordpressChosenReleaseFileName)

                    echo('Распаковываю WordPress...')
                    if (Shell.executeWithStatus("[[ -d '${wordpressChosenReleaseName}' ]]")) {
                        sh("rm -vrf '${wordpressChosenReleaseName}'")
                    }
                    sh("mkdir -v '${wordpressChosenReleaseName}'")
                    sh("tar x -zf '${wordpressChosenReleaseFileName}' -C '${wordpressChosenReleaseName}'")
                }
            }
        }
        stage('Get Themes') {
            steps {
                echo('Удаляю предустановленные темы WordPress...')
                sh("cd \"${wordpressChosenReleaseName}/wordpress/wp-content/themes/\" && rm -rf \$(ls | grep -v \"index.php\")")

                echo('Проверяю доступные версии тем WordPress...')
                script {
                    String currentName
                    String currentReleasesUrl
                    String currentReleasesFileName
                    String chosenReleaseUrl = null
                    String chosenReleaseFileName
                    List<String> releaseUrls
                    int size = Integer.valueOf(env.themes)
                    for (int i = 1; i <= size; i++) {
                        currentReleasesUrl = env['theme' + i.toString()]
                        currentName = regexGroup(currentReleasesUrl, themeReleaseNamePattern)

                        // Ссылка на дистрибутив или список версий?
                        if (regexFind(currentReleasesUrl, themeReleaseUrlPattern)) {
                            echo("Найдено 1 версий ${currentName}")
                            chosenReleaseUrl = currentReleasesUrl
                        } else {
                            // Получить файл релизов
                            currentReleasesFileName = String.format(themeReleasesFileName, currentName)
                            echo("Проверяю доступные версии ${currentName}...")
                            downloadFile(currentReleasesUrl, currentReleasesFileName, cacheLifetime)

                            // Поиск версий в файле
                            releaseUrls = searchText(currentReleasesFileName, String.format(themeReleaseUrlPattern, currentName))
                            if (releaseUrls.size()) {
                                // Выбор версии
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                                if (releaseUrls.size() == 1) {
                                    chosenReleaseUrl = releaseUrls.get(0)
                                } else {
                                    chosenReleaseUrl = input(message: "Выбор версии ${currentName}".toString(), parameters: [choice(name: "Версия ${currentName}", choices: releaseUrls.join('\n'))]).toString()
                                }
                            } else {
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                            }
                        }

                        echo("Скачиваю ${currentName}...")
                        chosenReleaseFileName = regexGroup(chosenReleaseUrl, String.format(themeReleaseFileNamePattern, currentName))
                        downloadFile(chosenReleaseUrl, chosenReleaseFileName)

                        echo("Распаковываю ${currentName}...")
                        sh("unzip -q '${chosenReleaseFileName}' -d '${wordpressChosenReleaseName}/wordpress/wp-content/themes/'")
                    }
                }
            }
        }
        stage('Get Plugins') {
            steps {
                echo('Удаляю предустановленные плагины WordPress...')
                sh("cd \"${wordpressChosenReleaseName}/wordpress/wp-content/plugins/\" && rm -rf \$(ls | grep -v \"index.php\")")

                echo('Проверяю доступные версии плагинов WordPress...')
                script {
                    String currentName
                    String currentReleasesUrl
                    String currentReleasesFileName
                    String chosenReleaseUrl = null
                    String chosenReleaseFileName
                    List<String> releaseUrls
                    int size = Integer.valueOf(env.plugins)
                    for (int i = 1; i <= size; i++) {
                        currentReleasesUrl = env['plugin' + i.toString()]
                        currentName = regexGroup(currentReleasesUrl, pluginReleaseNamePattern)

                        // Ссылка на дистрибутив или список версий?
                        if (regexFind(currentReleasesUrl, pluginReleaseUrlPattern)) {
                            echo("Найдено 1 версий ${currentName}")
                            chosenReleaseUrl = currentReleasesUrl
                        } else {
                            // Получить файл релизов
                            currentReleasesFileName = String.format(pluginReleasesFileName, currentName)
                            echo("Проверяю доступные версии ${currentName}...")
                            downloadFile(currentReleasesUrl, currentReleasesFileName, cacheLifetime)

                            // Поиск версий в файле
                            releaseUrls = searchText(currentReleasesFileName, String.format(pluginReleaseUrlPattern, currentName))
                            if (releaseUrls.size()) {
                                // Выбор версии
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                                if (releaseUrls.size() == 1) {
                                    chosenReleaseUrl = releaseUrls.get(0)
                                } else {
                                    chosenReleaseUrl = input(message: "Выбор версии ${currentName}".toString(), parameters: [choice(name: "Версия ${currentName}", choices: releaseUrls.join('\n'))]).toString()
                                }
                            } else {
                                echo("Найдено ${releaseUrls.size()} версий ${currentName}")
                            }
                        }

                        echo("Скачиваю ${currentName}...")
                        chosenReleaseFileName = regexGroup(chosenReleaseUrl, String.format(pluginReleaseFileNamePattern, currentName))
                        downloadFile(chosenReleaseUrl, chosenReleaseFileName)

                        echo("Распаковываю ${currentName}...")
                        sh("unzip -q '${chosenReleaseFileName}' -d '${wordpressChosenReleaseName}/wordpress/wp-content/plugins/'")
                    }
                }
            }
        }
        stage('Configure WordPress') {
            steps {
                echo('Настраиваю WordPress...')
                // Добавить дополнительную конфигурацию в начало файла с заменой <?php
                sh("sed -i 's/<?php//g' '${wordpressChosenReleaseName}/wordpress/wp-config-sample.php'")
                sh("cat \"job_build_wordpress_for_docker/src/wordpress/wp-config.php\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\" | tee \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\" 1>/dev/null")
                // Параметризовать файл - параметры базы данных
                sh("sed -i \"s/define( 'DB_NAME', 'database_name_here' );/define( 'DB_NAME', '\\\$DB_NAME' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'DB_USER', 'username_here' );/define( 'DB_USER', '\\\$DB_USER' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'DB_PASSWORD', 'password_here' );/define( 'DB_PASSWORD', '\\\$DB_PASSWORD' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'DB_HOST', 'localhost' );/define( 'DB_HOST', '\\\$DB_HOST' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'DB_CHARSET', 'utf8' );/define( 'DB_CHARSET', '\\\$DB_CHARSET' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'DB_COLLATE', '' );/define( 'DB_COLLATE', '\\\$DB_COLLATE' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                // Параметризовать файл - уникальные ключи и соли для аутентификации
                sh("sed -i \"s/define( 'AUTH_KEY',         'put your unique phrase here' );/define( 'AUTH_KEY',         '\\\$AUTH_KEY' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'SECURE_AUTH_KEY',  'put your unique phrase here' );/define( 'SECURE_AUTH_KEY',  '\\\$SECURE_AUTH_KEY' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'LOGGED_IN_KEY',    'put your unique phrase here' );/define( 'LOGGED_IN_KEY',    '\\\$LOGGED_IN_KEY' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'NONCE_KEY',        'put your unique phrase here' );/define( 'NONCE_KEY',        '\\\$NONCE_KEY' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'AUTH_SALT',        'put your unique phrase here' );/define( 'AUTH_SALT',        '\\\$AUTH_SALT' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'SECURE_AUTH_SALT', 'put your unique phrase here' );/define( 'SECURE_AUTH_SALT', '\\\$SECURE_AUTH_SALT' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'LOGGED_IN_SALT',   'put your unique phrase here' );/define( 'LOGGED_IN_SALT',   '\\\$LOGGED_IN_SALT' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
                sh("sed -i \"s/define( 'NONCE_SALT',       'put your unique phrase here' );/define( 'NONCE_SALT',       '\\\$NONCE_SALT' );/g\" \"${wordpressChosenReleaseName}/wordpress/wp-config-sample.php\"")
            }
        }
        stage('Docker Build') {
            steps {
                echo('Копирую зависимые файлы контейнера...')
                sh("cp -r 'src/job_build_wordpress_for_docker/Dockerfile' '${wordpressChosenReleaseName}/'")
                sh("cp -r 'src/job_build_wordpress_for_docker/httpd' '${wordpressChosenReleaseName}/'")
                sh("cp -r 'src/job_build_wordpress_for_docker/scripts' '${wordpressChosenReleaseName}/'")

                echo('Собираю контейнер...')
                script {
                    imageVersion = regexGroup(wordpressChosenReleaseName, "([0-9\\.]+)") + '-' + env.BUILD_NUMBER
                    imageFullName = imageName + ':' + imageVersion
                    withCredentials([string(credentialsId: hostCredentials, variable: 'host'), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                        Docker.executeRemote(env.host, env.user, env.id_rsa, {
                            if (doNotUseCache) {
                                Docker.build(imageFullName, wordpressChosenReleaseName, false)
                            } else {
                                Docker.build(imageFullName, wordpressChosenReleaseName)
                            }
                            // latest
                            Docker.tag(imageFullName, imageName)
                        })
                    }
                }
            }
        }
        stage('Docker Deploy') {
            steps {
                echo('Развёртываю контейнер...')
                script {
                    String result = null
                    List<String> containerIds = null
                    withCredentials([string(credentialsId: hostCredentials, variable: 'host'), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                        Shell.sshConnect(env.host, env.user, env.id_rsa)
                        try {
                            // Форматированный конфиг для скачивания
                            String dockerComposeYml = DockerCompose.config(dockerComposeProjectDirectory)
                            writeFile(file: 'docker-compose.yml', text: dockerComposeYml)

                            // Деплой
                            DockerCompose.down(dockerComposeProjectDirectory)
                            DockerCompose.up(dockerComposeProjectDirectory)
                            Thread.sleep(10000)
                            DockerCompose.logs(dockerComposeProjectDirectory)

                            result = DockerCompose.ps(dockerComposeProjectDirectory, true)
                            containerIds = new ArrayList<>()
                            containerIds.addAll(result.split('\n'))
                            containerIds.remove('')
                            echo("Развёрнуто ${containerIds.size()} контейнеров")
                        } catch (Exception e) {
                            error(e.printStackTrace())
                        } finally {
                            Shell.sshDisconnect()
                        }
                    }
                }
            }
        }
        stage('Docker Test') {
            steps {
                script {
                    if (!doNotTestImage) {
                        echo('Начинаю тестирование...')
                        String result = null
                        List<String> containerIds = null
                        withCredentials([string(credentialsId: hostCredentials, variable: 'host'), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                            Shell.sshConnect(env.host, env.user, env.id_rsa)
                            try {
                                echo('Тест: Перезагрузка')
                                DockerCompose.restart(dockerComposeProjectDirectory)
                                Thread.sleep(10000)
                                result = DockerCompose.ps(dockerComposeProjectDirectory, true)
                                containerIds = new ArrayList<>()
                                containerIds.addAll(result.split('\n'))
                                containerIds.remove('')
                                echo("Развёрнуто ${containerIds.size()} контейнеров")
                            } catch (Exception e) {
                                error(e.printStackTrace())
                            } finally {
                                Shell.sshDisconnect()
                            }

                            echo('Завершаю тестирование...')
                        }
                    }
                }

                script {
                    withCredentials([string(credentialsId: hostCredentials, variable: 'host'), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                        Shell.sshConnect(env.host, env.user, env.id_rsa)
                        try {
                            DockerCompose.down(dockerComposeProjectDirectory)
                        } catch (Exception e) {
                            error(e.printStackTrace())
                        } finally {
                            Shell.sshDisconnect()
                        }
                    }
                }
            }
        }
        stage('Docker Save') {
            steps {
                cleanWs(patterns: [[pattern: "${imageName}:*.tar", type: 'INCLUDE']])
                script {
                    if (doNotSaveImage) {
                        echo('Удаляю образ...')
                        withCredentials([string(credentialsId: hostCredentials, variable: 'host'), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                            Docker.executeRemote(env.host, env.user, env.id_rsa, {
                                Docker.rmi(imageFullName)
                            })
                        }
                    } else {
                        echo('Экспортирую образ...')
                        withCredentials([string(credentialsId: hostCredentials, variable: 'host'), sshUserPrivateKey(credentialsId: sshCredentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                            Docker.executeRemote(env.host, env.user, env.id_rsa, {
                                Docker.save(imageFullName, imageFullName + ".tar")
                            })
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs(deleteDirs: true, patterns: [[pattern: 'wordpress*', type: 'INCLUDE'], [pattern: '*.html', type: 'EXCLUDE'], [pattern: '*.tar', type: 'EXCLUDE'], [pattern: '*.tar.gz', type: 'EXCLUDE'], [pattern: '*.tar.xz', type: 'EXCLUDE'], [pattern: '*.zip', type: 'EXCLUDE'], [pattern: 'src', type: 'EXCLUDE']])
        }
    }
}