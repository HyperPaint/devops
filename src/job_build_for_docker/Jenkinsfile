package job_build_for_docker

@Library("devops@job_build_for_docker")
import hyperpaint.util.Regex
import hyperpaint.util.Shell
import hyperpaint.util.Util

Shell.setJenkins(this)

/* Получение параметров, проверка и назначение значений по-умолчанию */
/** Выбирать последние версии автоматически */
Boolean useLatestVersion = params.use_latest_version
Boolean useLatestVersionDefault = false
String useLatestVersionDescription = "Выбирать последние версии автоматически"
/** Использовать кэш загрузок */
Boolean useCacheFile = params.use_cache_file
Boolean useCacheFileDefault = true
String useCacheFileDescription = "Использовать кэш загрузок"
/** Использовать кэш сборок */
Boolean useCacheDocker = params.use_cache_docker
Boolean useCacheDockerDefault = true
String useCacheDockerDescription = "Использовать кэш сборок"
/** Деплой и проверка состояния контейнера */
Boolean deployImage = params.deploy_image
Boolean deployImageDefault = true
String deployImageDescription = "Деплой и проверка состояния контейнера"
/** Экспортировать образ */
Boolean exportImage = params.export_image
Boolean exportImageDefault = false
String exportImageDescription = "Экспортировать образ"
/** Удалить образ */
Boolean deleteImage = params.delete_image
Boolean deleteImageDefault = false
String deleteImageDescription = "Удалить образ"

/* Получение переменных окружения */
String hostCredentials = env.host_credentials
String sshCredentials = env.ssh_credentials
String dockerComposeProjectDirectory = env.docker_compose_project_directory

/** Docker image name */
String imageName = env.image_name

/** URL на страницу с релизами или дистрибутив */
String appUrl = env.app_url
/** Инвертировать список ссылок */
Boolean appUrlReverse = env.app_url_reverse.toBoolean()
/** Количество регулярных выражений для отбора ссылок */
Integer appDistributiveUrlRegexCount = env.app_distributive_url_regex_count.toInteger()

String themesDirectory = env.themes_directory
/** Количество плагинов */
Integer themesCount = env.themes_count.toInteger()
/** Инвертировать список ссылок */
Boolean themeUrlReverse = env.theme_url_reverse.toBoolean()
/** Количество регулярных выражений для отбора ссылок */
Integer themeDistributiveUrlRegexCount = env.theme_distributive_url_regex_count

String pluginsDirectory = env.plugins_directory
/** Количество плагинов */
Integer pluginsCount = env.plugins_count.toInteger()
/** Инвертировать список ссылок */
Boolean pluginUrlReverse = env.plugin_url_reverse.toBoolean()
/** Количество регулярных выражений для отбора ссылок */
Integer pluginDistributiveUrlRegexCount = env.plugin_distributive_url_regex_count

/* Константы */
int cacheLifetime = 86400
String buildDirectory = "build-directory"

pipeline {
    agent any
    parameters {
        booleanParam(name: "use_latest_version", defaultValue: useLatestVersionDefault, description: useLatestVersionDescription)
        booleanParam(name: "use_cache_file", defaultValue: useCacheFileDefault, description: useCacheFileDescription)
        booleanParam(name: "use_cache_docker", defaultValue: useCacheDockerDefault, description: useCacheDockerDescription)
        booleanParam(name: "deploy_image", defaultValue: deployImageDefault, description: deployImageDescription)
        booleanParam(name: "export_image", defaultValue: exportImageDefault, description: exportImageDescription)
        booleanParam(name: "delete_image", defaultValue: deleteImageDefault, description: deleteImageDescription)
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage("Параметры и переменные окружения") {
            steps {
                script {
                    /* Задание стандартных параметров */
                    String notFoundParamStringSetDefault = "Параметр '%s' не найден, использую стандартное значение '%s'"
                    String foundParamString = "Параметр '%s' найден"

                    if (useLatestVersion == null) {
                        useLatestVersion = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "use_latest_version", useLatestVersion.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "use_latest_version"))
                    }

                    if (useCacheFile == null) {
                        useCacheFile = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "use_cache_file", useCacheFile.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "use_cache_file"))
                    }

                    if (useCacheDocker == null) {
                        useCacheDocker = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "use_cache_docker", useCacheDocker.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "use_cache_docker"))
                    }

                    if (deployImage == null) {
                        deployImage = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "deploy_image", deployImage.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "deploy_image"))
                    }

                    if (exportImage == null) {
                        exportImage = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "export_image", exportImage.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "export_image"))
                    }

                    if (deleteImage == null) {
                        deleteImage = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "delete_image", deleteImage.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "delete_image"))
                    }

                    /* Проверка переменных окружения */
                    /* Проверка необязательных переменных окружения */
                    String notFoundEnvStringSetDefault = "Переменная окружения '%s' не найдена, использую стандартное значение '%s'"
                    /* Проверка обязательных переменных окружения */
                    String notFoundEnvStringError = "Переменная окружения '%s' не найдена, выполнение невозможно"
                    String foundEnvString = "Переменная окружения '%s' найдена"

                    if (hostCredentials == null) {
                        Shell.error(String.format(notFoundEnvStringError, "host_credentials"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "host_credentials"))
                    }

                    if (sshCredentials == null) {
                        Shell.error(String.format(notFoundEnvStringError, "ssh_credentials"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "ssh_credentials"))
                    }

                    if (dockerComposeProjectDirectory == null) {
                        Shell.error(String.format(notFoundEnvStringError, "docker_compose_project_directory"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "docker_compose_project_directory"))
                    }

                    if (imageName == null) {
                        Shell.error(String.format(notFoundEnvStringError, "image_name"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "image_name"))
                    }

                    if (appUrl == null) {
                        Shell.error(String.format(notFoundEnvStringError, "app_url"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "app_url"))
                    }

                    if (appUrlReverse == null) {
                        appUrlReverse = false
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "app_url_reverse", appUrlReverse))
                    } else {
                        Shell.echo(String.format(foundEnvString, "app_url_reverse"))
                    }

                    if (appDistributiveUrlRegexCount == null) {
                        appDistributiveUrlRegexCount = 0
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "app_distributive_url_regex_count", appDistributiveUrlRegexCount))
                    } else {
                        Shell.echo(String.format(foundEnvString, "app_distributive_url_regex_count"))
                        if (appDistributiveUrlRegexCount != 0) {
                            for (int i = 1; i <= appDistributiveUrlRegexCount; i++) {
                                if (env["app_distributive_url_regex${i}"] == null) {
                                    Shell.error(String.format(notFoundEnvStringError, "app_distributive_url_regex${i}"))
                                } else {
                                    Shell.echo(String.format(foundEnvString, "app_distributive_url_regex${i}"))
                                }
                            }
                        }
                    }

                    if (themesCount == null) {
                        themesCount = 0
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "themes_count", themesCount.toString()))
                    } else {
                        Shell.echo(String.format(foundEnvString, "themes_count"))
                        if (themesCount != 0) {
                            if (themesDirectory == null) {
                                Shell.error(String.format(notFoundEnvStringError, "themes_directory"))
                            } else {
                                Shell.echo(String.format(foundEnvString, "themes_directory"))
                            }

                            for (int i = 1; i <= themesCount; i++) {
                                if (env["theme_url${i}"] == null) {
                                    Shell.error(String.format(notFoundEnvStringError, "theme_url${i}"))
                                } else {
                                    Shell.echo(String.format(foundEnvString, "theme_url${i}"))
                                }
                            }

                            if (themeUrlReverse == null) {
                                themeUrlReverse = false
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "theme_url_reverse", themeUrlReverse))
                            } else {
                                Shell.echo(String.format(foundEnvString, "theme_url_reverse"))
                            }

                            if (themeDistributiveUrlRegexCount == null) {
                                themeDistributiveUrlRegexCount = 0
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "theme_distributive_url_regex_count", themeDistributiveUrlRegexCount))
                            } else {
                                Shell.echo(String.format(foundEnvString, "theme_distributive_url_regex_count"))
                                if (themeDistributiveUrlRegexCount != 0) {
                                    for (int i = 1; i <= themeDistributiveUrlRegexCount; i++) {
                                        if (env["theme_distributive_url_regex${i}"] == null) {
                                            Shell.error(String.format(notFoundEnvStringError, "theme_distributive_url_regex${i}"))
                                        } else {
                                            Shell.echo(String.format(foundEnvString, "theme_distributive_url_regex${i}"))
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (pluginsCount == null) {
                        pluginsCount = 0
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "plugins_count", pluginsCount.toString()))
                    } else {
                        Shell.echo(String.format(foundEnvString, "plugins_count"))
                        if (pluginsCount != 0) {
                            if (pluginsDirectory == null) {
                                Shell.error(String.format(notFoundEnvStringError, "plugins_directory"))
                            } else {
                                Shell.echo(String.format(foundEnvString, "plugins_directory"))
                            }

                            for (int i = 1; i <= pluginsCount; i++) {
                                if (env["plugin_url${i}"] == null) {
                                    Shell.error(String.format(notFoundEnvStringError, "plugin_url${i}"))
                                } else {
                                    Shell.echo(String.format(foundEnvString, "plugin_url${i}"))
                                }
                            }

                            if (pluginUrlReverse == null) {
                                pluginUrlReverse = false
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "plugin_url_reverse", pluginUrlReverse))
                            } else {
                                Shell.echo(String.format(foundEnvString, "plugin_url_reverse"))
                            }

                            if (pluginDistributiveUrlRegexCount == null) {
                                pluginDistributiveUrlRegexCount = 0
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "plugin_distributive_url_regex_count", pluginDistributiveUrlRegexCount))
                            } else {
                                Shell.echo(String.format(foundEnvString, "plugin_distributive_url_regex_count"))
                                if (pluginDistributiveUrlRegexCount != 0) {
                                    for (int i = 1; i <= pluginDistributiveUrlRegexCount; i++) {
                                        if (env["plugin_distributive_url_regex${i}"] == null) {
                                            Shell.error(String.format(notFoundEnvStringError, "plugin_distributive_url_regex${i}"))
                                        } else {
                                            Shell.echo(String.format(foundEnvString, "plugin_distributive_url_regex${i}"))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Получаю дистрибутив") {
            steps {
                script {
                    /* Распарсить параметры из ссылки */
                    Boolean isReleasesPage = Regex.find(appUrl, "[\\?\\&]is_releases_page=1")
                    if (isReleasesPage) {
                        Shell.echo("${appUrl} - Страница HTML с ссылками")
                    }
                    Boolean isDistributive = Regex.find(appUrl, "[\\?\\&]is_distributive=1")
                    Boolean isFileNameDefined = Regex.find(appUrl, "[\\?\\&]file_name=([A-Za-z0-9\\-_\\.])")
                    if (isDistributive && !isReleasesPage) {
                        if (isFileNameDefined) {
                            Shell.echo("${appUrl} - Архив дистрибутива с именем")
                        } else {
                            Shell.echo("${appUrl} - Архив дистрибутива")
                        }
                    }

                    Runnable releasesPageRunnable = {
                        if (useCacheFile) Util.downloadFile(appUrl, "releases.html", cacheLifetime) else Util.downloadFile(appUrl, "releases.html", -1)

                        /* Найти на странице с релизами все ссылки href с тегом <a> */
                        String releasesHTML = readFile("releases.html")
                        List<String> urlsList = Regex.groupAll(releasesHTML, "<a[A-Za-z0-9\\-_\\.\\s]*href\\s*=\\s*\"([A-Za-z0-9\\-_\\.]+)\"[A-Za-z0-9\\-_\\.\\s]*>")

                        /* Преобразование относительных ссылок в абсолютные */
                        Shell.echo("Преобразовываю относительные ссылки в абсолютные")
                        List<String> absoluteUrlsList = new ArrayList<>()
                        int size = urlsList.size()
                        for (int i = 0; i < size; i++) {
                            String currentUrl = urlsList.get(i)
                            if (Regex.find(currentUrl, "^(\\.\\/){0,1}[A-Za-z0-9\\-_\\.]+\$")) {
                                /* Относительная ссылка */
                                absoluteUrlsList.add(appUrl + currentUrl)
                            } else {
                                /* Абсолютная ссылка */
                                absoluteUrlsList.add(currentUrl)
                            }
                        }

                        /* Отобрать только те ссылки, которые подходят по регулярному выражению */
                        /* Но сначала создать массив регулярных выражений */
                        Shell.echo("Отбираю ссылки, которые подходят по регулярному выражению")
                        String[] regexArray = new String[appDistributiveUrlRegexCount]
                        for (int i = 0; i < appDistributiveUrlRegexCount; i++) {
                            regexArray[i] = env["app_distributive_url_regex${i+1}"]
                        }
                        /* Отобрать только те ссылки, которые подходят по регулярному выражению */
                        urlsList.clear()
                        size = absoluteUrlsList.size()
                        for (int i = 0; i < size; i++) {
                            Shell.echo("${i}\t/\t${size}")
                            String currentUrl = absoluteUrlsList.get(i)

                            Boolean success = true
                            for (int regex = 0; i < appDistributiveUrlRegexCount; regex++) {
                                if (!Regex.find(currentUrl, regexArray[regex])) {
                                    Shell.echo("Ссылка не подходит ${currentUrl} ${regexArray[regex]}")
                                    success = false
                                    break
                                }
                            }

                            if (success) {
                                // Подходящая ссылка
                                if (!urlsList.contains(currentUrl)) {
                                    Shell.echo("Ссылка подходит ${currentUrl}")
                                    // Уникальная ссылка
                                    urlsList.add(currentUrl)
                                }
                            }
                        }

                        /* Инвертирование списка */
                        if (appUrlReverse) {
                            Shell.echo("Инвертирую список")
                            urlsList = urlsList.reverse()
                        }

                        /* Если ссылок несколько, то запросить ввод */
                        String downloadUrl = null
                        size = urlsList.size()
                        if (size == 0) {
                            Shell.error("Найдено ${size} ссылок")
                        } else {
                            Shell.echo("Найдено ${size} ссылок")
                            if (size == 1) {
                                downloadUrl = urlsList.get(0)
                            } else {
                                if (useLatestVersion) {
                                    downloadUrl = urlsList.get(0)
                                } else {
                                    downloadUrl = input(message: "Выбор версии ${appUrl}", parameters: [choice(name: "Версия", choices: urlsList.join('\n'))]).toString()
                                }
                            }
                        }

                        /* Скачать дистрибутив */
                        String fileName
                        if (isFileNameDefined) {
                            fileName = Regex.group(downloadUrl, "[\\?\\&]file_name=([A-Za-z0-9\\-_\\.])")
                        } else {
                            fileName = Regex.group(downloadUrl, ".+\\/(.+)\$")
                        }
                        if (useCacheFile) Util.downloadFile(downloadUrl, fileName) else Util.downloadFile(downloadUrl, fileName, -1)
                        Util.unarchiveFile(fileName, buildDirectory, true)
                    }

                    Runnable distributiveRunnable = {
                        /* Скачать дистрибутив */
                        String downloadUrl = appUrl
                        String fileName
                        if (isFileNameDefined) {
                            fileName = Regex.group(downloadUrl, "[\\?\\&]file_name=([A-Za-z0-9\\-_\\.])")
                        } else {
                            fileName = Regex.group(downloadUrl, ".+\\/(.+)\$")
                        }
                        if (useCacheFile) Util.downloadFile(downloadUrl, fileName) else Util.downloadFile(downloadUrl, fileName, -1)
                        Util.unarchiveFile(fileName, buildDirectory, true)
                    }

                    if (isReleasesPage) {
                        releasesPageRunnable.run()
                    } else if (isDistributive) {
                        distributiveRunnable.run()
                    } else {
                        releasesPageRunnable.run()
                    }
                }
            }
        }
    }
}