package job_build_for_docker

@Library("devops@job_build_for_docker")
import hyperpaint.util.Regex
import hyperpaint.util.Shell
import hyperpaint.util.Util

Shell.setJenkins(this)

class MyGlobal {
    static def jenkins = null

    /* Получение параметров, проверка и назначение значений по-умолчанию */
    /** Выбирать последние версии автоматически */
    static Boolean useLatestVersion = null
    static Boolean useLatestVersionDefault = false
    static String useLatestVersionDescription = "Выбирать последние версии автоматически"
    /** Использовать кэш загрузок */
    static Boolean useCacheFile = null
    static Boolean useCacheFileDefault = true
    static String useCacheFileDescription = "Использовать кэш загрузок"
    /** Использовать кэш сборок */
    static Boolean useCacheDocker = null
    static Boolean useCacheDockerDefault = true
    static String useCacheDockerDescription = "Использовать кэш сборок"
    /** Деплой и проверка состояния контейнера */
    static Boolean deployImage = null
    static Boolean deployImageDefault = true
    static String deployImageDescription = "Деплой и проверка состояния контейнера"
    /** Экспортировать образ */
    static Boolean exportImage = null
    static Boolean exportImageDefault = false
    static String exportImageDescription = "Экспортировать образ"
    /** Удалить образ */
    static Boolean deleteImage = null
    static Boolean deleteImageDefault = false
    static String deleteImageDescription = "Удалить образ"

    /* Получение переменных окружения */
    static String hostCredentials = null
    static String sshCredentials = null
    static String dockerComposeProjectDirectory = null

    /** Docker image name */
    static String imageName = null

    /** URL на страницу с релизами или дистрибутив */
    static String appUrl = null
    /** Инвертировать список ссылок */
    static Boolean appUrlReverse = null
    /** Количество регулярных выражений для отбора ссылок */
    static Integer appDistributiveUrlRegexCount = null

    static String themesDirectory = null
    /** Количество плагинов */
    static Integer themesCount = null
    /** Инвертировать список ссылок */
    static Boolean themeUrlReverse = null
    /** Количество регулярных выражений для отбора ссылок */
    static Integer themeDistributiveUrlRegexCount = null

    static String pluginsDirectory = null
    /** Количество плагинов */
    static Integer pluginsCount = null
    /** Инвертировать список ссылок */
    static Boolean pluginUrlReverse = null
    /** Количество регулярных выражений для отбора ссылок */
    static Integer pluginDistributiveUrlRegexCount = null

    /* Константы */
    static int cacheLifetime = 86400
    static String buildDirectory = "build-directory"
    static String artifactFileNameRegex = "[\\?\\&]artifact_file_name=([A-Za-z0-9\\-_\\.])"
    static String releasesPageRegex = "[\\?\\&]is_releases_page=1"
    static String distributiveRegex = "[\\?\\&]is_distributive=1"
}

MyGlobal.jenkins = this

/* Функции */

/**
 * Скачать страницу с релизами. Найти на ней все ссылки.
 * Преобразовать относительные ссылки в абсолютные.
 * Отобрать среди них те, что подходят по регулярным выражениям и уникальные.
 * При необходимости инвертировать список ссылок.
 * Если ссылок несколько, то запросить ввод, выбрать дистрибутив, скачать его и распаковать.
 * @param artifactFileName Название файла артефакта
 * @param url URL на страницу с релизами или дистрибутив
 * @param regexArray Массив регулярных выражений для отбора ссылок
 * @param urlReverse Инвертировать список ссылок
 * @param destination Директория, в которую распаковать дистрибутив
 */
static void releasesPage(String artifactFileName, String url, String[] regexArray, Boolean urlReverse, String destination) {
    String releasesHtmlFileName
    if (artifactFileName == null) releasesHtmlFileName = "releases.html" else releasesHtmlFileName = "releases-${artifactFileName}.html"
    if (MyGlobal.useCacheFile) Util.downloadFile(url, releasesHtmlFileName, MyGlobal.cacheLifetime) else Util.downloadFile(url, releasesHtmlFileName, -1)

    /* Найти на странице с релизами все ссылки href с тегом <a> */
    String releasesHtml = MyGlobal.jenkins.readFile(releasesHtmlFileName)
    List<String> urlsList = Regex.groupAll(releasesHtml, "<a[A-Za-z0-9\\-_\\.\\s]*href\\s*=\\s*\"([A-Za-z0-9\\-_\\.]+)\"[A-Za-z0-9\\-_\\.\\s]*>")

    /* Преобразование относительных ссылок в абсолютные */
    Shell.echo("Преобразовываю относительные ссылки в абсолютные")
    List<String> absoluteUrlsList = new ArrayList<>()
    for (int urlIndex = 0; urlIndex < urlsList.size(); urlIndex++) {
        String currentUrl = urlsList.get(urlIndex)
        if (Regex.find(currentUrl, "^(\\.\\/){0,1}[A-Za-z0-9\\-_\\.]+[\\/]{0,1}\$")) {
            /* Относительная ссылка */
            absoluteUrlsList.add(url + currentUrl)
        } else {
            /* Абсолютная ссылка */
            absoluteUrlsList.add(currentUrl)
        }
    }

    /* Отобрать только те ссылки, которые подходят по регулярному выражению */
    Shell.echo("Отбираю ссылки, которые подходят по регулярному выражению")
    urlsList.clear()
    for (int urlIndex = 0; urlIndex < absoluteUrlsList.size(); urlIndex++) {
        String currentUrl = absoluteUrlsList.get(urlIndex)

        Boolean success = true
        for (int regexIndex = 0; regexIndex < regexArray.size(); regexIndex++) {
            if (!Regex.find(currentUrl, regexArray[regexIndex])) {
                success = false
                break
            }
        }

        if (success) {
            // Подходящая ссылка
            if (!urlsList.contains(currentUrl)) {
                // Уникальная ссылка
                urlsList.add(currentUrl)
            }
        }
    }

    /* Инвертирование списка */
    if (urlReverse) {
        Shell.echo("Инвертирую список")
        urlsList = urlsList.reverse()
    }

    /* Если ссылок несколько, то запросить ввод */
    String downloadUrl = null
    if (urlsList.size() == 0) {
        Shell.error("Найдено ${urlsList.size()} ссылок")
    } else {
        Shell.echo("Найдено ${urlsList.size()} ссылок")
        if (urlsList.size() == 1) {
            downloadUrl = urlsList.get(0)
        } else {
            if (MyGlobal.useLatestVersion) {
                downloadUrl = urlsList.get(0)
            } else {
                downloadUrl = MyGlobal.jenkins.input(message: "Выбор версии ${url}", parameters: [MyGlobal.jenkins.choice(name: "Версия", choices: urlsList.join('\n'))]).toString()
            }
        }
    }

    /* Скачать дистрибутив */
    String fileName = Regex.group(downloadUrl, ".+\\/(.+)(\\/){0,1}(\\?.*){0,1}\$")
    if (MyGlobal.useCacheFile) Util.downloadFile(downloadUrl, fileName) else Util.downloadFile(downloadUrl, fileName, -1)
    Util.unarchiveFile(fileName, destination, true)
}

/**
 * Скачать дистрибутив и распаковать.
 * @param isArtifactFileNameDefined Название файла артефакта задано
 * @param url URL на страницу с релизами или дистрибутив
 * @param destination Директория, в которую распаковать дистрибутив
 */
static void distributive(Boolean isArtifactFileNameDefined, String url, String destination) {
    /* Скачать дистрибутив */
    String downloadUrl = url
    String fileName
    if (isArtifactFileNameDefined) {
        fileName = Regex.group(downloadUrl, "[\\?\\&]artifact_file_name=([A-Za-z0-9\\-_\\.])")
    } else {
        fileName = Regex.group(downloadUrl, ".+\\/(.+)(\\/){0,1}(\\?.*){0,1}\$")
    }
    if (MyGlobal.useCacheFile) Util.downloadFile(downloadUrl, fileName) else Util.downloadFile(downloadUrl, fileName, -1)
    Util.unarchiveFile(fileName, destination, true)
}

static void isReleasesPageEcho(String url, Boolean isReleasesPage, Boolean isArtifactFileNameDefined) {
    if (isReleasesPage) {
        if (isArtifactFileNameDefined) {
            Shell.echo("${url} - Страница HTML с ссылками с именем артефакта")
        } else {
            Shell.echo("${url} - Страница HTML с ссылками")
        }
    }
}

static void isDistributiveEcho(String url, Boolean isDistributive, Boolean isReleasesPage, Boolean isArtifactFileNameDefined) {
    if (isDistributive && !isReleasesPage) {
        if (isArtifactFileNameDefined) {
            Shell.echo("${url} - Архив дистрибутива с именем артефакта")
        } else {
            Shell.echo("${url} - Архив дистрибутива")
        }
    }
}

pipeline {
    agent any
    parameters {
        booleanParam(name: "use_latest_version", defaultValue: MyGlobal.useLatestVersionDefault, description: MyGlobal.useLatestVersionDescription)
        booleanParam(name: "use_cache_file", defaultValue: MyGlobal.useCacheFileDefault, description: MyGlobal.useCacheFileDescription)
        booleanParam(name: "use_cache_docker", defaultValue: MyGlobal.useCacheDockerDefault, description: MyGlobal.useCacheDockerDescription)
        booleanParam(name: "deploy_image", defaultValue: MyGlobal.deployImageDefault, description: MyGlobal.deployImageDescription)
        booleanParam(name: "export_image", defaultValue: MyGlobal.exportImageDefault, description: MyGlobal.exportImageDescription)
        booleanParam(name: "delete_image", defaultValue: MyGlobal.deleteImageDefault, description: MyGlobal.deleteImageDescription)
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage("Параметры и переменные окружения") {
            steps {
                script {
                    /* Задание стандартных параметров */
                    String notFoundParamStringSetDefault = "Параметр '%s' не найден, использую стандартное значение '%s'"
                    String foundParamString = "Параметр '%s' найден"

                    MyGlobal.useLatestVersion = params.use_latest_version
                    MyGlobal.useCacheFile = params.use_cache_file
                    MyGlobal.useCacheDocker = params.use_cache_docker
                    MyGlobal.deployImage = params.deploy_image
                    MyGlobal.exportImage = params.export_image
                    MyGlobal.deleteImage = params.delete_image
                    MyGlobal.hostCredentials = env.host_credentials
                    MyGlobal.sshCredentials = env.ssh_credentials
                    MyGlobal.dockerComposeProjectDirectory = env.docker_compose_project_directory
                    MyGlobal.imageName = env.image_name
                    MyGlobal.appUrl = env.app_url
                    MyGlobal.appUrlReverse = env.app_url_reverse.toBoolean()
                    MyGlobal.appDistributiveUrlRegexCount = env.app_distributive_url_regex_count.toInteger()
                    MyGlobal.themesDirectory = env.themes_directory
                    MyGlobal.themesCount = env.themes_count.toInteger()
                    MyGlobal.themeUrlReverse = env.theme_url_reverse.toBoolean()
                    MyGlobal.themeDistributiveUrlRegexCount = env.theme_distributive_url_regex_count
                    MyGlobal.pluginsDirectory = env.plugins_directory
                    MyGlobal.pluginsCount = env.plugins_count.toInteger()
                    MyGlobal.pluginUrlReverse = env.plugin_url_reverse.toBoolean()
                    MyGlobal.pluginDistributiveUrlRegexCount = env.plugin_distributive_url_regex_count

                    if (MyGlobal.useLatestVersion == null) {
                        useLatestVersion = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "use_latest_version", MyGlobal.useLatestVersion.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "use_latest_version"))
                    }


                    if (MyGlobal.useCacheFile == null) {
                        useCacheFile = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "use_cache_file", MyGlobal.useCacheFile.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "use_cache_file"))
                    }

                    if (MyGlobal.useCacheDocker == null) {
                        useCacheDocker = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "use_cache_docker", MyGlobal.useCacheDocker.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "use_cache_docker"))
                    }

                    if (MyGlobal.deployImage == null) {
                        deployImage = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "deploy_image", MyGlobal.deployImage.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "deploy_image"))
                    }

                    if (MyGlobal.exportImage == null) {
                        exportImage = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "export_image", MyGlobal.exportImage.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "export_image"))
                    }

                    if (MyGlobal.deleteImage == null) {
                        deleteImage = true
                        Shell.echo(String.format(notFoundParamStringSetDefault, "delete_image", MyGlobal.deleteImage.toString()))
                    } else {
                        Shell.echo(String.format(foundParamString, "delete_image"))
                    }

                    /* Проверка переменных окружения */
                    /* Проверка необязательных переменных окружения */
                    String notFoundEnvStringSetDefault = "Переменная окружения '%s' не найдена, использую стандартное значение '%s'"
                    /* Проверка обязательных переменных окружения */
                    String notFoundEnvStringError = "Переменная окружения '%s' не найдена, выполнение невозможно"
                    String foundEnvString = "Переменная окружения '%s' найдена"

                    if (MyGlobal.hostCredentials == null) {
                        Shell.error(String.format(notFoundEnvStringError, "host_credentials"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "host_credentials"))
                    }

                    if (MyGlobal.sshCredentials == null) {
                        Shell.error(String.format(notFoundEnvStringError, "ssh_credentials"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "ssh_credentials"))
                    }

                    if (MyGlobal.dockerComposeProjectDirectory == null) {
                        Shell.error(String.format(notFoundEnvStringError, "docker_compose_project_directory"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "docker_compose_project_directory"))
                    }

                    if (MyGlobal.imageName == null) {
                        Shell.error(String.format(notFoundEnvStringError, "image_name"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "image_name"))
                    }

                    if (MyGlobal.appUrl == null) {
                        Shell.error(String.format(notFoundEnvStringError, "app_url"))
                    } else {
                        Shell.echo(String.format(foundEnvString, "app_url"))
                    }

                    if (MyGlobal.appUrlReverse == null) {
                        appUrlReverse = false
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "app_url_reverse", MyGlobal.appUrlReverse))
                    } else {
                        Shell.echo(String.format(foundEnvString, "app_url_reverse"))
                    }

                    if (MyGlobal.appDistributiveUrlRegexCount == null) {
                        appDistributiveUrlRegexCount = 0
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "app_distributive_url_regex_count", MyGlobal.appDistributiveUrlRegexCount))
                    } else {
                        Shell.echo(String.format(foundEnvString, "app_distributive_url_regex_count"))
                        if (MyGlobal.appDistributiveUrlRegexCount != 0) {
                            for (int i = 1; i <= MyGlobal.appDistributiveUrlRegexCount; i++) {
                                if (env["app_distributive_url_regex${i}"] == null) {
                                    Shell.error(String.format(notFoundEnvStringError, "app_distributive_url_regex${i}"))
                                } else {
                                    Shell.echo(String.format(foundEnvString, "app_distributive_url_regex${i}"))
                                }
                            }
                        }
                    }

                    if (MyGlobal.themesCount == null) {
                        themesCount = 0
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "themes_count", MyGlobal.themesCount.toString()))
                    } else {
                        Shell.echo(String.format(foundEnvString, "themes_count"))
                        if (MyGlobal.themesCount != 0) {
                            if (MyGlobal.themesDirectory == null) {
                                Shell.error(String.format(notFoundEnvStringError, "themes_directory"))
                            } else {
                                Shell.echo(String.format(foundEnvString, "themes_directory"))
                            }

                            for (int i = 1; i <= MyGlobal.themesCount; i++) {
                                if (env["theme_url${i}"] == null) {
                                    Shell.error(String.format(notFoundEnvStringError, "theme_url${i}"))
                                } else {
                                    Shell.echo(String.format(foundEnvString, "theme_url${i}"))
                                }
                            }

                            if (MyGlobal.themeUrlReverse == null) {
                                themeUrlReverse = false
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "theme_url_reverse", MyGlobal.themeUrlReverse))
                            } else {
                                Shell.echo(String.format(foundEnvString, "theme_url_reverse"))
                            }

                            if (MyGlobal.themeDistributiveUrlRegexCount == null) {
                                themeDistributiveUrlRegexCount = 0
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "theme_distributive_url_regex_count", MyGlobal.themeDistributiveUrlRegexCount))
                            } else {
                                Shell.echo(String.format(foundEnvString, "theme_distributive_url_regex_count"))
                                if (MyGlobal.themeDistributiveUrlRegexCount != 0) {
                                    for (int i = 1; i <= MyGlobal.themeDistributiveUrlRegexCount; i++) {
                                        if (env["theme_distributive_url_regex${i}"] == null) {
                                            Shell.error(String.format(notFoundEnvStringError, "theme_distributive_url_regex${i}"))
                                        } else {
                                            Shell.echo(String.format(foundEnvString, "theme_distributive_url_regex${i}"))
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (MyGlobal.pluginsCount == null) {
                        pluginsCount = 0
                        Shell.echo(String.format(notFoundEnvStringSetDefault, "plugins_count", MyGlobal.pluginsCount.toString()))
                    } else {
                        Shell.echo(String.format(foundEnvString, "plugins_count"))
                        if (MyGlobal.pluginsCount != 0) {
                            if (MyGlobal.pluginsDirectory == null) {
                                Shell.error(String.format(notFoundEnvStringError, "plugins_directory"))
                            } else {
                                Shell.echo(String.format(foundEnvString, "plugins_directory"))
                            }

                            for (int i = 1; i <= MyGlobal.pluginsCount; i++) {
                                if (env["plugin_url${i}"] == null) {
                                    Shell.error(String.format(notFoundEnvStringError, "plugin_url${i}"))
                                } else {
                                    Shell.echo(String.format(foundEnvString, "plugin_url${i}"))
                                }
                            }

                            if (MyGlobal.pluginUrlReverse == null) {
                                pluginUrlReverse = false
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "plugin_url_reverse", MyGlobal.pluginUrlReverse))
                            } else {
                                Shell.echo(String.format(foundEnvString, "plugin_url_reverse"))
                            }

                            if (MyGlobal.pluginDistributiveUrlRegexCount == null) {
                                pluginDistributiveUrlRegexCount = 0
                                Shell.echo(String.format(notFoundEnvStringSetDefault, "plugin_distributive_url_regex_count", MyGlobal.pluginDistributiveUrlRegexCount))
                            } else {
                                Shell.echo(String.format(foundEnvString, "plugin_distributive_url_regex_count"))
                                if (MyGlobal.pluginDistributiveUrlRegexCount != 0) {
                                    for (int i = 1; i <= MyGlobal.pluginDistributiveUrlRegexCount; i++) {
                                        if (env["plugin_distributive_url_regex${i}"] == null) {
                                            Shell.error(String.format(notFoundEnvStringError, "plugin_distributive_url_regex${i}"))
                                        } else {
                                            Shell.echo(String.format(foundEnvString, "plugin_distributive_url_regex${i}"))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Получаю дистрибутив") {
            steps {
                script {
                    /* Распарсить параметры из ссылки */
                    Boolean isArtifactFileNameDefined = Regex.find(MyGlobal.appUrl, MyGlobal.artifactFileNameRegex)
                    Boolean isReleasesPage = Regex.find(MyGlobal.appUrl, MyGlobal.releasesPageRegex)
                    isReleasesPageEcho(MyGlobal.appUrl, isReleasesPage, isArtifactFileNameDefined)
                    Boolean isDistributive = Regex.find(MyGlobal.appUrl, MyGlobal.distributiveRegex)
                    isDistributiveEcho(MyGlobal.appUrl, isDistributive, isReleasesPage, isArtifactFileNameDefined)

                    Closure releasesPageRunnable = {
                        String[] regexArray = new String[MyGlobal.appDistributiveUrlRegexCount]
                        for (int regexIndex = 0; regexIndex < MyGlobal.appDistributiveUrlRegexCount; regexIndex++) {
                            regexArray[regexIndex] = env["app_distributive_url_regex${regexIndex+1}"]
                        }
                        releasesPage(null, MyGlobal.appUrl, regexArray, MyGlobal.appUrlReverse, MyGlobal.buildDirectory)
                    }

                    if (isReleasesPage) {
                        releasesPageRunnable.run()
                    } else if (isDistributive) {
                        distributive(isArtifactFileNameDefined, MyGlobal.appUrl, MyGlobal.buildDirectory)
                    } else {
                        releasesPageRunnable.run()
                    }

                    // Удаление лишнего из дистрибутива sh
                }
            }
        }
        stage("Получаю темы") {
            steps {
                script {
                    for (int theme = 1;  theme <= MyGlobal.themesCount; theme++) {
                        String url = env["theme_url${theme}"]

                        Boolean isArtifactFileNameDefined = Regex.find(url, MyGlobal.artifactFileNameRegex)
                        Boolean isReleasesPage = Regex.find(url, MyGlobal.releasesPageRegex)
                        isReleasesPageEcho(url, isReleasesPage, isArtifactFileNameDefined)
                        Boolean isDistributive = Regex.find(url, MyGlobal.distributiveRegex)
                        isDistributiveEcho(url, isDistributive, isReleasesPage, isArtifactFileNameDefined)

                        Closure releasesPageRunnable = {
                            String artifactFileName = Regex.group(url, MyGlobal.artifactFileNameRegex)
                            String[] regexArray = new String[MyGlobal.themeDistributiveUrlRegexCount]
                            for (int regexIndex = 0; regexIndex < MyGlobal.themeDistributiveUrlRegexCount; regexIndex++) {
                                regexArray[regexIndex] = env["theme_distributive_url_regex${regexIndex+1}"]
                            }
                            releasesPage(artifactFileName, url, regexArray, MyGlobal.themeUrlReverse, "${MyGlobal.buildDirectory}/${MyGlobal.themesDirectory}/")
                        }

                        if (isReleasesPage) {
                            releasesPageRunnable.run()
                        } else if (isDistributive) {
                            distributive(isArtifactFileNameDefined, url, "${MyGlobal.buildDirectory}/${MyGlobal.themesDirectory}/")
                        } else {
                            releasesPageRunnable.run()
                        }
                    }
                }
            }
        }
        stage("Получаю плагины") {
            steps {
                script {
                    for (int plugin = 1;  plugin <= MyGlobal.pluginsCount; plugin++) {
                        String url = env["plugin_url${plugin}"]

                        Boolean isArtifactFileNameDefined = Regex.find(url, MyGlobal.artifactFileNameRegex)
                        Boolean isReleasesPage = Regex.find(url, MyGlobal.releasesPageRegex)
                        isReleasesPageEcho(url, isReleasesPage, isArtifactFileNameDefined)
                        Boolean isDistributive = Regex.find(url, MyGlobal.distributiveRegex)
                        isDistributiveEcho(url, isDistributive, isReleasesPage, isArtifactFileNameDefined)

                        Closure releasesPageRunnable = {
                            String artifactFileName = Regex.group(url, MyGlobal.artifactFileNameRegex)
                            String[] regexArray = new String[MyGlobal.pluginDistributiveUrlRegexCount]
                            for (int regexIndex = 0; regexIndex < MyGlobal.pluginDistributiveUrlRegexCount; regexIndex++) {
                                regexArray[regexIndex] = env["plugin_distributive_url_regex${regexIndex+1}"]
                            }
                            releasesPage(artifactFileName, url, regexArray, MyGlobal.pluginUrlReverse, "${MyGlobal.buildDirectory}/${MyGlobal.pluginsDirectory}/")
                        }

                        if (isReleasesPage) {
                            releasesPageRunnable.run()
                        } else if (isDistributive) {
                            distributive(isArtifactFileNameDefined, url, "${MyGlobal.buildDirectory}/${MyGlobal.pluginsDirectory}/")
                        } else {
                            releasesPageRunnable.run()
                        }
                    }
                }
            }
        }
        /*
        stage("Настройка") {
            // Настройка sh
        }
        stage("Docker Build") {
            // docker build
        }
        stage("Docker Deploy") {
            // docker down
            // docker config
            // docker up
            // docker life-check
            // docker down
        }
        stage("Экспортирую образ") {
            // docker save
        }
        stage("Удаляю образ") {
            // docker image rm
        }
        */
    }
}