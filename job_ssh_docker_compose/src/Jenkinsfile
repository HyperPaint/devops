import java.util.regex.Matcher

String host_credentials = params.host_credentials
String ssh_credentials = params.ssh_credentials
String docker_compose_file_path = params.docker_compose_file_path
String docker_compose_file_name = ''
String docker_compose_action = params.docker_compose_action

Boolean shReturnStatus(String cmd) {
    assert cmd instanceof String
    return sh(script: cmd, returnStatus: true) == 0
}

String shReturnStdout(String cmd) {
    assert cmd instanceof String
    return sh(script: cmd, returnStdout: true)
}

String matherMatchesGetFirstGroup(String text, String regex) {
    Matcher matcher = (text =~ regex)
    matcher.matches()
    try {
        return matcher.group(1)
    }
    catch (IllegalStateException e) {
        sh("echo ${text} > text.log")
        error("Не удалось найти совпадение по регулярному выражению ${regex}\n${text}\n${e.message}\n${e.stackTrace.toString()}")
    }
    catch (IndexOutOfBoundsException e) {
        sh("echo ${text} > text.log")
        error("Не удалось найти первую группу по регулярному выражению ${regex}\n${text}\n${e.message}\n${e.stackTrace.toString()}")
    }
}

// Вывод состояния контейнера
void echoContainerState(Map<String, String> containerStateMap) {
    echo("Status: ${containerStateMap.getOrDefault('status', '')}")
    echo("Running: ${containerStateMap.getOrDefault('running', '')}")
    echo("Paused: ${containerStateMap.getOrDefault('paused', '')}")
    echo("Restarting: ${containerStateMap.getOrDefault('restarting', '')}")
    echo("OOMKilled: ${containerStateMap.getOrDefault('oomKilled', '')}")
    echo("Dead: ${containerStateMap.getOrDefault('dead', '')}")
    echo("Pid: ${containerStateMap.getOrDefault('pid', '')}")
    echo("ExitCode: ${containerStateMap.getOrDefault('exitCode', '')}")
    echo("Error: ${containerStateMap.getOrDefault('error', '')}")
    echo("StartedAt: ${containerStateMap.getOrDefault('startedAtDate', '')} ${containerStateMap.getOrDefault('startedAtTime', '')}")
    echo("FinishedAt: ${containerStateMap.getOrDefault('finishedAtDate', '')} ${containerStateMap.getOrDefault('finishedAtTime', '')}")
}

// Одинаковые для всех проверки
void checkCommon(Map<String, String> containerStateMap) {
    if (containerStateMap.getOrDefault('paused', '').toBoolean()) {
        echoContainerState(containerStateMap)
        currentBuild.result = 'UNSTABLE'
        error('Действие невозможно, контейнер приостановлен')
    } else if (containerStateMap.getOrDefault('oomKilled', '').toBoolean()) {
        echoContainerState(containerStateMap)
        currentBuild.result = 'UNSTABLE'
        error('Действие невозможно, недостаточно памяти')
    } else if (containerStateMap.getOrDefault('dead', '').toBoolean()) {
        echoContainerState(containerStateMap)
        currentBuild.result = 'UNSTABLE'
        error('Действие невозможно, контейнер мёртв')
    }
}

ArrayList<String> containerIds = new ArrayList<>()
ArrayList<Map<String,String>> containerStates = new ArrayList<>()

//noinspection GroovyAssignabilityCheck
pipeline {
    agent any
    stages {
        stage('check_input') {
            steps {
                echo 'Проверяю входные данные...'
                script {
                    withCredentials([string(credentialsId: host_credentials, variable: 'host'), sshUserPrivateKey(credentialsId: ssh_credentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                        // Проверка подключения
                        if (!shReturnStatus("ssh -i ${id_rsa} -o StrictHostKeyChecking=no ${user}@${host} 'exit'")) {
                            error('Не удалось подключиться по ssh')
                        }
                        // Проверка файла
                        echo("Указан путь к файлу ${docker_compose_file_path}")
                        docker_compose_file_name = matherMatchesGetFirstGroup(docker_compose_file_path, '^.*/(.+)$')
                        echo("Найден файл ${docker_compose_file_name}")
                        if (!shReturnStatus("ssh -i $id_rsa -o StrictHostKeyChecking=no $user@$host '[[ -f ${docker_compose_file_path} ]]'")) {
                            error("Указан недопустимый файл $docker_compose_file_path")
                        }
                    }
                    echo("Указано действие ${docker_compose_action}")
                    //noinspection GroovyFallthrough
                    switch (docker_compose_action) {
                        case 'start':
                        case 'stop':
                        case 'restart':
                            break
                        default:
                            error("Указано недопустимое действие ${docker_compose_action}")
                    }
                }
            }
        }
        stage('get_state') {
            steps {
                echo 'Получаю состояние...'
                script {
                    withCredentials([string(credentialsId: host_credentials, variable: 'host'), sshUserPrivateKey(credentialsId: ssh_credentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                        // Получить ид контейнеров
                        String result = shReturnStdout("ssh -i ${id_rsa} -o StrictHostKeyChecking=no ${user}@${host} 'docker compose --project-directory ${docker_compose_file_path.replace(docker_compose_file_name, '')} ps -qa'")
                        containerIds.addAll(result.split('\n'))

                        // Получить состояния контейнеров
                        int size = containerIds.size()
                        for (int i = 0; i < size; i++) {
                            state = shReturnStdout("ssh -i ${id_rsa} -o StrictHostKeyChecking=no ${user}@${host} 'docker inspect ${containerIds.get(i)}'")
                            /*
                            "State": {
                                "Status": "exited",
                                "Running": false,
                                "Paused": false,
                                "Restarting": false,
                                "OOMKilled": false,
                                "Dead": false,
                                "Pid": 0,
                                "ExitCode": 137,
                                "Error": "",
                                "StartedAt": "2023-07-08T12:12:54.655493806Z",
                                "FinishedAt": "2023-07-08T12:13:13.041136993Z"
                            },
                             */
                            Map<String, String> containerStateMap = new HashMap<>()
                            containerStateMap.put('status', matherMatchesGetFirstGroup(state, '"Status".*"([a-z]+)",')) // string
                            containerStateMap.put('running', matherMatchesGetFirstGroup(state, '"Running":\\s([a-z]+),')) // boolean
                            containerStateMap.put('paused', matherMatchesGetFirstGroup(state, '"Paused":\\s([a-z]+),')) // boolean
                            containerStateMap.put('restarting', matherMatchesGetFirstGroup(state, '"Restarting":\\s([a-z]+),')) // boolean
                            containerStateMap.put('oomKilled', matherMatchesGetFirstGroup(state, '"OOMKilled":\\s([a-z]+),')) // boolean
                            containerStateMap.put('dead', matherMatchesGetFirstGroup(state, '"Dead":\\s([a-z]+),')) // boolean
                            containerStateMap.put('pid', matherMatchesGetFirstGroup(state, '"Pid":\\s([0-9]+),')) // int
                            containerStateMap.put('exitCode', matherMatchesGetFirstGroup(state, '"ExitCode":\\s([0-9]+),')) // int
                            containerStateMap.put('error', matherMatchesGetFirstGroup(state, '"Error":\\s"(.*)",')) // string
                            containerStateMap.put('startedAtDate', matherMatchesGetFirstGroup(state, '"StartedAt":\\s"(\\d+-\\d+-\\d+)T\\d+:\\d+:\\d+\\.\\d+Z"')) // datetime
                            containerStateMap.put('startedAtTime', matherMatchesGetFirstGroup(state, '"StartedAt":\\s"\\d+-\\d+-\\d+T(\\d+:\\d+:\\d+)\\.\\d+Z"')) // datetime
                            containerStateMap.put('finishedAtDate', matherMatchesGetFirstGroup(state, '"FinishedAt":\\s"(\\d+-\\d+-\\d+)T\\d+:\\d+:\\d+\\.\\d+Z"')) // datetime
                            containerStateMap.put('finishedAtTime', matherMatchesGetFirstGroup(state, '"FinishedAt":\\s"\\d+-\\d+-\\d+T(\\d+:\\d+:\\d+)\\.\\d+Z"')) // datetime
                            containerStates.add(containerStateMap)
                        }
                    }
                }
            }
        }
        stage('analyze_state') {
            steps {
                echo 'Анализирую состояние...'
                script {
                    // Проверка возможности действия с текущим состоянием
                    int size = containerStates.size()
                    switch (docker_compose_action) {
                        case 'start':
                            boolean someNotRunning = false
                            for (int i = 0; i < size; i++) {
                                Map<String, String> containerStateMap = containerStates.get(i)
                                checkCommon(containerStateMap)
                                // Если хоть один остановлен
                                someNotRunning = someNotRunning || !containerStateMap.getOrDefault('running', '').toBoolean()
                            }
                            if (!someNotRunning) {
                                currentBuild.result = 'ABORTED'
                                error("Проект запущен в ${containerStateMap.getOrDefault('startedAtDate', '')} ${containerStateMap.getOrDefault('startedAtTime', '')}")
                            }
                            break

                        case 'stop':
                            boolean someRunning = false
                            for (int i = 0; i < size; i++) {
                                Map<String, String> containerStateMap = containerStates.get(i)
                                checkCommon(containerStateMap)
                                // Если хоть один запущен
                                someRunning = someRunning || containerStateMap.getOrDefault('running', '').toBoolean()
                            }
                            if (!someRunning) {
                                currentBuild.result = 'ABORTED'
                                error("Проект остановлен в ${containerStateMap.getOrDefault('finishedAtDate', '')} ${containerStateMap.getOrDefault('finishedAtTime', '')}")
                            }
                            break

                        case 'restart':
                            boolean someRestarting = false
                            for (int i = 0; i < size; i++) {
                                Map<String, String> containerStateMap = containerStates.get(i)
                                checkCommon(containerStateMap)
                                // Если хоть один перезапускается
                                someRestarting = someRestarting || containerStateMap.getOrDefault('restarting', '').toBoolean()
                            }
                            if (someRestarting) {
                                currentBuild.result = 'ABORTED'
                                error('Проект перезапускается')
                            }
                            break
                    }
                }
            }
        }
        stage('action') {
            steps {
                echo 'Выполняю действие...'
                script {
                    withCredentials([string(credentialsId: host_credentials, variable: 'host'), sshUserPrivateKey(credentialsId: ssh_credentials, keyFileVariable: 'id_rsa', usernameVariable: 'user')]) {
                        switch (docker_compose_action) {
                            case 'start':
                                sh("ssh -i ${id_rsa} -o StrictHostKeyChecking=no ${user}@${host} 'docker compose --project-directory ${docker_compose_file_path.replace(docker_compose_file_name, '')} start'")
                                echo('Проект запущен')
                                break

                            case 'stop':
                                sh("ssh -i ${id_rsa} -o StrictHostKeyChecking=no ${user}@${host} 'docker compose --project-directory ${docker_compose_file_path.replace(docker_compose_file_name, '')} stop'")
                                echo('Проект остановлен')
                                break

                            case 'restart':
                                sh("ssh -i ${id_rsa} -o StrictHostKeyChecking=no ${user}@${host} 'docker compose --project-directory ${docker_compose_file_path.replace(docker_compose_file_name, '')} restart'")
                                echo('Проект перезапущен')
                                break

                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}